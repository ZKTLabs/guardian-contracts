{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/interfaces/IComplianceRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\ninterface IComplianceEvent {\n\n    event AddProposalToAnotherNetworkList(bool isWhitelistRegistry, bytes data, bytes32 networkHash);\n}\n\ninterface IComplianceEntry {\n    struct Compliance {\n        bytes32 proposalId;\n        address author;\n        string description;\n        bool isInList;\n    }\n}\n\ninterface IComplianceRegistry is IComplianceEntry, IComplianceEvent {\n    function addProposalToList(\n        ProposalCommon.Proposal memory proposal\n    ) external;\n\n    function checkAddress(address account) external view returns (bool);\n\n    function isWhitelistRegistry() external view returns (bool);\n\n    function decodeBytes(bytes memory data) external view returns (address, bytes32);\n}\n"
    },
    "contracts/interfaces/IComplianceRegistryStub.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\ninterface IComplianceRegistryStubEvent {\n    event AddToBlacklist(bytes32);\n\n    event AddToWhitelist(bytes32);\n}\n\ninterface IComplianceRegistryStub is IComplianceRegistryStubEvent {\n    function confirmProposal(ProposalCommon.Proposal memory proposal) external;\n\n    function isWhitelist(address account) external view returns (bool);\n\n    function isBlacklist(address account) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/INetworkSupportedRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface INetworkSupportedRegistryEvent {\n\n    event AddNetworkHash(bytes32 networkHash);\n\n    event AddNetworkName(string, bytes32);\n\n    event RevokeNetworkHash(bytes32 networkHash);\n\n    event RevokeNetworkName(string, bytes32);\n}\n\ninterface INetworkSupportedRegistry is INetworkSupportedRegistryEvent {\n\n    function isNetworkSupported(bytes32 networkHash) external view returns (bool);\n\n    function isNetworkSupported(string memory networkName) external view returns (bool);\n}\n"
    },
    "contracts/libraries/ProposalCommon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nlibrary ProposalCommon {\n    enum ProposalStatus {\n        Unknown,\n        Pending,\n        Approved,\n        Rejected\n    }\n\n    struct Proposal {\n        bytes32 id;\n        address author;\n        bytes[] targets;\n        bool isWhitelist;\n        string description;\n        uint256 timestamp;\n        ProposalStatus status;\n        bytes signature;\n        uint256 voters;\n        uint256 activeNodes;\n    }\n}\n"
    },
    "contracts/oracle/ComplianceRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {IComplianceRegistry} from \"../interfaces/IComplianceRegistry.sol\";\nimport {INetworkSupportedRegistry} from \"../interfaces/INetworkSupportedRegistry.sol\";\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\ncontract ComplianceRegistry is IComplianceRegistry, AccessControl {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant COMPLIANCE_REGISTRY_STUB_ROLE =\n        keccak256(\"COMPLIANCE_REGISTRY_STUB_ROLE\");\n\n    bool public override isWhitelistRegistry;\n    mapping(address => Compliance) public complianceList;\n    INetworkSupportedRegistry public networkRegistry;\n\n    constructor(\n        bool _isWhitelistRegistry,\n        address _networkRegistry\n    ) {\n        _setupRole(ADMIN_ROLE, _msgSender());\n        _setRoleAdmin(COMPLIANCE_REGISTRY_STUB_ROLE, ADMIN_ROLE);\n\n        isWhitelistRegistry = _isWhitelistRegistry;\n        networkRegistry = INetworkSupportedRegistry(_networkRegistry);\n    }\n\n    function addProposalToList(\n        ProposalCommon.Proposal memory proposal\n    ) external override onlyRole(COMPLIANCE_REGISTRY_STUB_ROLE) {\n        for (uint256 idx = 0; idx < proposal.targets.length; idx++) {\n            bytes memory data = proposal.targets[idx];\n            (address target, bytes32 networkHash) = decodeBytes(data);\n            if (complianceList[target].isInList) continue;\n            if (target == address(0)) {\n                emit AddProposalToAnotherNetworkList(isWhitelistRegistry, data, networkHash);\n            }\n            complianceList[target] = Compliance({\n                proposalId: proposal.id,\n                isInList: true,\n                author: proposal.author,\n                description: proposal.description\n            });\n        }\n    }\n\n    function checkAddress(\n        address account\n    ) external view override returns (bool) {\n        return complianceList[account].isInList;\n    }\n\n    function decodeBytes(bytes memory data) public override view returns (address, bytes32)\n    {\n        (bytes memory addressBytes, bytes32 networkHash) = abi.decode(data, (bytes, bytes32));\n        if (networkRegistry.isNetworkSupported(networkHash)) {\n            address targetAddress = abi.decode(addressBytes, (address));\n            return (targetAddress, networkHash);\n        } else {\n            return (address(0), networkHash);\n        }\n    }\n}\n"
    },
    "contracts/oracle/ComplianceRegistryStub_L1.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {IComplianceRegistryStub} from \"../interfaces/IComplianceRegistryStub.sol\";\nimport {IComplianceRegistry} from \"../interfaces/IComplianceRegistry.sol\";\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\nerror ComplianceRegistryStub_L1__InvalidConfirmProposalStatus();\n\ncontract ComplianceRegistryStub_L1 is IComplianceRegistryStub, AccessControl {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant GUARDIAN_NODE =\n        keccak256(\"GUARDIAN_NODE\");\n\n    constructor(address _whitelistRegistry, address _blacklistRegistry) {\n        _setupRole(ADMIN_ROLE, _msgSender());\n        _setRoleAdmin(GUARDIAN_NODE, ADMIN_ROLE);\n\n        whitelistRegistry = IComplianceRegistry(_whitelistRegistry);\n        blacklistRegistry = IComplianceRegistry(_blacklistRegistry);\n    }\n\n    IComplianceRegistry public whitelistRegistry;\n    IComplianceRegistry public blacklistRegistry;\n\n    function confirmProposal(\n        ProposalCommon.Proposal memory proposal\n    ) external override onlyRole(GUARDIAN_NODE) {\n        if (proposal.status != ProposalCommon.ProposalStatus.Approved)\n            revert ComplianceRegistryStub_L1__InvalidConfirmProposalStatus();\n        if (proposal.isWhitelist) {\n            whitelistRegistry.addProposalToList(proposal);\n            emit AddToWhitelist(proposal.id);\n        } else {\n            blacklistRegistry.addProposalToList(proposal);\n            emit AddToBlacklist(proposal.id);\n        }\n    }\n\n    function isWhitelist(\n        address account\n    ) external view override returns (bool) {\n        return\n            whitelistRegistry.checkAddress(account) &&\n            !blacklistRegistry.checkAddress(account);\n    }\n\n    function isBlacklist(\n        address account\n    ) external view override returns (bool) {\n        return blacklistRegistry.checkAddress(account);\n    }\n}\n"
    },
    "contracts/oracle/ComplianceRegistryStub.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {IComplianceRegistryStub} from \"../interfaces/IComplianceRegistryStub.sol\";\nimport {IComplianceRegistry} from \"../interfaces/IComplianceRegistry.sol\";\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\nerror ComplianceRegistryStub__InvalidConfirmProposalStatus();\n\ncontract ComplianceRegistryStub is IComplianceRegistryStub, AccessControl {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant PROPOSAL_MANAGEMENT_ROLE =\n        keccak256(\"PROPOSAL_MANAGEMENT_ROLE\");\n\n    IComplianceRegistry public whitelistRegistry;\n    IComplianceRegistry public blacklistRegistry;\n\n    constructor(\n        address _whitelistRegistry,\n        address _blacklistRegistry\n    ) {\n        _setupRole(ADMIN_ROLE, _msgSender());\n        _setRoleAdmin(PROPOSAL_MANAGEMENT_ROLE, ADMIN_ROLE);\n\n        whitelistRegistry = IComplianceRegistry(_whitelistRegistry);\n        blacklistRegistry = IComplianceRegistry(_blacklistRegistry);\n    }\n\n    function confirmProposal(\n        ProposalCommon.Proposal memory proposal\n    ) external override onlyRole(PROPOSAL_MANAGEMENT_ROLE) {\n        if (proposal.status != ProposalCommon.ProposalStatus.Approved)\n            revert ComplianceRegistryStub__InvalidConfirmProposalStatus();\n        if (proposal.isWhitelist) {\n            whitelistRegistry.addProposalToList(proposal);\n            emit AddToWhitelist(proposal.id);\n        } else {\n            blacklistRegistry.addProposalToList(proposal);\n            emit AddToBlacklist(proposal.id);\n        }\n    }\n\n    function isWhitelist(\n        address account\n    ) external view override returns (bool) {\n        return\n            whitelistRegistry.checkAddress(account) &&\n            !blacklistRegistry.checkAddress(account);\n    }\n\n    function isBlacklist(\n        address account\n    ) external view override returns (bool) {\n        return blacklistRegistry.checkAddress(account);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": false
      }
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}