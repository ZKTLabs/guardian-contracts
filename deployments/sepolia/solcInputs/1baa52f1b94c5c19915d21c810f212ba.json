{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IComplianceRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\ninterface IComplianceEvent {\n    event AddProposalToAnotherNetworkList(\n        bool isWhitelistRegistry,\n        bytes data,\n        bytes32 networkHash\n    );\n}\n\ninterface IComplianceEntry {\n    struct Compliance {\n        bytes32 proposalId;\n        address target;\n        address author;\n        bool isInList;\n    }\n}\n\ninterface IComplianceRegistry is IComplianceEntry, IComplianceEvent {\n    function addProposalToList(\n        ProposalCommon.Proposal memory proposal\n    ) external;\n\n    function checkAddress(address account) external view returns (bool);\n\n    function isWhitelistRegistry() external view returns (bool);\n\n    function decodeBytes(\n        bytes memory data\n    ) external view returns (address, bytes32);\n}\n"
    },
    "contracts/interfaces/IComplianceRegistryStub.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\ninterface IComplianceRegistryStubEvent {\n    event AddProposalToRegistryList(address, bool, bytes32);\n\n    event AddRegistryToList(address, bool);\n\n    event ReplaceRegistry(address, bool, uint256);\n}\n\ninterface IComplianceRegistryStub is IComplianceRegistryStubEvent {\n    function confirmProposal(ProposalCommon.Proposal memory proposal) external;\n\n    function isWhitelist(address account) external view returns (bool);\n\n    function isBlacklist(address account) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IGuardianNode.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface ISentryGuardianNodeSlot {\n    struct Slot0 {\n        uint256 activeNodes;\n    }\n}\n\ninterface IGuardianNode is ISentryGuardianNodeSlot {\n    function activeNodes() external view returns (uint256);\n    function voteParticipated(address addr) external view returns (uint256);\n    function consecutiveOnlineSession(\n        address addr\n    ) external view returns (uint256);\n    function zktEarned(address addr) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IProposalManagement.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface IProposalManagementEvent {\n    event ConfirmProposal(bytes32 proposalId);\n    event RejectProposal(bytes32 proposalId);\n    event UpdateRegionComplianceRegistryStub(string, bytes, address);\n}\n\ninterface IProposalManagement is IProposalManagementEvent {\n    function createProposal(\n        bytes32 proposalId,\n        bytes[] calldata targets,\n        bool isWhitelist,\n        string calldata region,\n        string calldata description,\n        bytes calldata signature\n    ) external;\n\n    function voteAndConfirmProposals(bytes32[] calldata proposalIds) external;\n\n    function rejectExpiredProposals(\n        bytes32[] calldata expiredProposalIds\n    ) external;\n}\n"
    },
    "contracts/libraries/ProposalCommon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nlibrary ProposalCommon {\n    enum ProposalStatus {\n        Unknown,\n        Pending,\n        Approved,\n        Rejected\n    }\n\n    struct Proposal {\n        bytes32 id;\n        address author;\n        bytes[] targets;\n        bool isWhitelist;\n        string description;\n        string region;\n        uint256 timestamp;\n        ProposalStatus status;\n        bytes signature;\n        uint256 voters;\n        uint256 activeNodes;\n    }\n}\n"
    },
    "contracts/oracle/ComplianceAggregator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IComplianceRegistryStub.sol\";\n\nerror ComplianceAggregator__OnlyWhitelistAction();\nerror ComplianceAggregator__ExcludeBlacklistAction();\n\nabstract contract ComplianceAggregator {\n    modifier onlyWhitelistAction() {\n        if (!stub.isWhitelist(msg.sender))\n            revert ComplianceAggregator__OnlyWhitelistAction();\n        _;\n    }\n\n    modifier ExcludeBlacklistAction() {\n        if (stub.isBlacklist(msg.sender))\n            revert ComplianceAggregator__ExcludeBlacklistAction();\n        _;\n    }\n\n    IComplianceRegistryStub public stub;\n\n    constructor(address complianceRegistryStub) {\n        stub = IComplianceRegistryStub(complianceRegistryStub);\n    }\n}\n"
    },
    "contracts/oracle/ComplianceRegistryStub_L1.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {AccessControlUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {IComplianceRegistryStub} from \"../interfaces/IComplianceRegistryStub.sol\";\nimport {IComplianceRegistry} from \"../interfaces/IComplianceRegistry.sol\";\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\nerror ComplianceRegistryStub_L1__InvalidConfirmProposalStatus();\nerror ComplianceRegistryStub_L1__WhitelistRegistryNotEnough();\nerror ComplianceRegistryStub_L1__BlacklistRegistryNotEnough();\n\ncontract ComplianceRegistryStub_L1 is\n    IComplianceRegistryStub,\n    AccessControlUpgradeable\n{\n    bytes32 public constant ADMIN_ROLE =\n        keccak256(\"compliance-registry-stub-l1.admin.role\");\n    bytes32 public constant MANAGER_ROLE =\n        keccak256(\"compliance-registry-stub-1.manager.role\");\n    bytes32 public constant GUARDIAN_NODE =\n        keccak256(\"compliance-registry-stub-l1.guardian.role\");\n\n    mapping(uint256 => IComplianceRegistry) public whitelistRegistries;\n    mapping(uint256 => IComplianceRegistry) public blacklistRegistries;\n\n    uint256[2] public registriesCount; // 0 - whitelist 1 - blacklist\n    uint256[2] public maxProposalEachRegistries; // 0 - whitelist 1 - blacklist\n    uint256[2] public cumulativeProposals; // 0 - whitelist 1 - blacklist\n\n    function initialize(address _admin) public initializer {\n        _grantRole(ADMIN_ROLE, _admin);\n        _setRoleAdmin(MANAGER_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(GUARDIAN_NODE, ADMIN_ROLE);\n\n        maxProposalEachRegistries[0] = 10;\n        maxProposalEachRegistries[1] = 10;\n        cumulativeProposals[0] = 0;\n        cumulativeProposals[1] = 0;\n        registriesCount[0] = 0;\n        registriesCount[1] = 0;\n        require(hasRole(ADMIN_ROLE, _admin));\n    }\n\n    function updateMaxProposalEachRegistries(\n        uint256[] memory _maxProposalEachRegistries\n    ) external onlyRole(MANAGER_ROLE) {\n        maxProposalEachRegistries[0] = _maxProposalEachRegistries[0];\n        maxProposalEachRegistries[1] = _maxProposalEachRegistries[1];\n    }\n\n    function addRegistry(\n        IComplianceRegistry registry,\n        bool useWhitelist\n    ) external onlyRole(MANAGER_ROLE) {\n        if (useWhitelist) {\n            whitelistRegistries[registriesCount[0]] = registry;\n            registriesCount[0]++;\n        } else {\n            blacklistRegistries[registriesCount[1]] = registry;\n            registriesCount[1]++;\n        }\n        emit AddRegistryToList(address(registry), useWhitelist);\n    }\n\n    function replaceRegistry(\n        IComplianceRegistry registry,\n        bool useWhitelist,\n        uint256 index\n    ) external onlyRole(MANAGER_ROLE)\n    {\n        require(index < registriesCount[0] && index < registriesCount[1]);\n        if (useWhitelist) {\n            whitelistRegistries[index] = registry;\n        } else {\n            blacklistRegistries[index] = registry;\n        }\n        emit ReplaceRegistry(address(registry), useWhitelist, index);\n    }\n\n    function confirmProposal(\n        ProposalCommon.Proposal memory proposal\n    ) external override onlyRole(GUARDIAN_NODE) {\n        if (proposal.status != ProposalCommon.ProposalStatus.Approved)\n            revert ComplianceRegistryStub_L1__InvalidConfirmProposalStatus();\n        if (proposal.isWhitelist) {\n            uint256 pivot = cumulativeProposals[0] /\n                maxProposalEachRegistries[0];\n            if (pivot >= registriesCount[0])\n                revert ComplianceRegistryStub_L1__WhitelistRegistryNotEnough();\n            IComplianceRegistry whitelistRegistry = whitelistRegistries[pivot];\n            whitelistRegistry.addProposalToList(proposal);\n            cumulativeProposals[0]++;\n            emit AddProposalToRegistryList(\n                address(whitelistRegistry),\n                true,\n                proposal.id\n            );\n        } else {\n            uint256 pivot = cumulativeProposals[1] /\n                maxProposalEachRegistries[1];\n            if (pivot >= registriesCount[1])\n                revert ComplianceRegistryStub_L1__BlacklistRegistryNotEnough();\n            IComplianceRegistry blacklistRegistry = blacklistRegistries[pivot];\n            blacklistRegistry.addProposalToList(proposal);\n            cumulativeProposals[1]++;\n            emit AddProposalToRegistryList(\n                address(blacklistRegistry),\n                false,\n                proposal.id\n            );\n        }\n    }\n\n    function isWhitelist(\n        address account\n    ) external view override returns (bool) {\n        for (uint256 idx = 0; idx < registriesCount[0]; idx++) {\n            if (whitelistRegistries[idx].checkAddress(account)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function isBlacklist(\n        address account\n    ) external view override returns (bool) {\n        for (uint256 idx = 0; idx < registriesCount[1]; idx++) {\n            if (blacklistRegistries[idx].checkAddress(account)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/oracle/ComplianceRegistryStub.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {AccessControlUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {IComplianceRegistryStub} from \"../interfaces/IComplianceRegistryStub.sol\";\nimport {IComplianceRegistry} from \"../interfaces/IComplianceRegistry.sol\";\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\nerror ComplianceRegistryStub__InvalidConfirmProposalStatus();\nerror ComplianceRegistryStub__WhitelistRegistryNotEnough();\nerror ComplianceRegistryStub__BlacklistRegistryNotEnough();\n\ncontract ComplianceRegistryStub is\n    IComplianceRegistryStub,\n    AccessControlUpgradeable\n{\n    bytes32 public constant ADMIN_ROLE =\n        keccak256(\"compliance-registry-stub.admin.role\");\n    bytes32 public constant MANAGER_ROLE =\n        keccak256(\"compliance-registry-stub.manager.role\");\n    bytes32 public constant PROPOSAL_MANAGEMENT_ROLE =\n        keccak256(\"compliance-registry-stub.proposal_management.role\");\n\n    IComplianceRegistry[] public whitelistRegistries;\n    IComplianceRegistry[] public blacklistRegistries;\n\n    uint256[2] public maxProposalEachRegistries; // 0 - whitelist 1 - blacklist\n    uint256[2] public cumulativeProposals; // 0 - whitelist 1 - blacklist\n\n    function initialize(address _admin) public initializer {\n        _grantRole(ADMIN_ROLE, _admin);\n        _setRoleAdmin(PROPOSAL_MANAGEMENT_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(MANAGER_ROLE, ADMIN_ROLE);\n\n        maxProposalEachRegistries[0] = 100;\n        maxProposalEachRegistries[1] = 100;\n        cumulativeProposals[0] = 0;\n        cumulativeProposals[1] = 0;\n    }\n\n    function updateMaxProposalEachRegistries(\n        uint256[] memory _maxProposalEachRegistries\n    ) external onlyRole(MANAGER_ROLE) {\n        maxProposalEachRegistries[0] = _maxProposalEachRegistries[0];\n        maxProposalEachRegistries[1] = _maxProposalEachRegistries[1];\n    }\n\n    function addRegistry(\n        IComplianceRegistry registry,\n        bool useWhitelist\n    ) external onlyRole(MANAGER_ROLE) {\n        if (useWhitelist) {\n            for (uint256 idx = 0; idx < whitelistRegistries.length; idx++) {\n                if (address(whitelistRegistries[idx]) == address(registry)) {\n                    return;\n                }\n            }\n            whitelistRegistries.push(registry);\n        } else {\n            for (uint256 idx = 0; idx < blacklistRegistries.length; idx++) {\n                if (address(blacklistRegistries[idx]) == address(registry)) {\n                    return;\n                }\n            }\n            blacklistRegistries.push(registry);\n        }\n        emit AddRegistryToList(address(registry), useWhitelist);\n    }\n\n    function confirmProposal(\n        ProposalCommon.Proposal memory proposal\n    ) external override onlyRole(PROPOSAL_MANAGEMENT_ROLE) {\n        if (proposal.status != ProposalCommon.ProposalStatus.Approved)\n            revert ComplianceRegistryStub__InvalidConfirmProposalStatus();\n        if (proposal.isWhitelist) {\n            uint256 pivot = cumulativeProposals[0] /\n                maxProposalEachRegistries[0];\n            if (pivot > whitelistRegistries.length)\n                revert ComplianceRegistryStub__WhitelistRegistryNotEnough();\n            IComplianceRegistry whitelistRegistry = whitelistRegistries[pivot];\n            whitelistRegistry.addProposalToList(proposal);\n            cumulativeProposals[0] += 1;\n            emit AddProposalToRegistryList(\n                address(whitelistRegistry),\n                true,\n                proposal.id\n            );\n        } else {\n            uint256 pivot = cumulativeProposals[1] /\n                            maxProposalEachRegistries[1];\n            if (pivot >= blacklistRegistries.length)\n                revert ComplianceRegistryStub__BlacklistRegistryNotEnough();\n            IComplianceRegistry blacklistRegistry = blacklistRegistries[pivot];\n            blacklistRegistry.addProposalToList(proposal);\n            cumulativeProposals[1] += 1;\n            emit AddProposalToRegistryList(\n                address(blacklistRegistry),\n                false,\n                proposal.id\n            );\n        }\n    }\n\n    function isWhitelist(\n        address account\n    ) external view override returns (bool) {\n        for (uint256 idx = 0; idx < whitelistRegistries.length; idx++) {\n            if (whitelistRegistries[idx].checkAddress(account)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function isBlacklist(\n        address account\n    ) external view override returns (bool) {\n        for (uint256 idx = 0; idx < blacklistRegistries.length; idx++) {\n            if (blacklistRegistries[idx].checkAddress(account)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/oracle/ProposalManagement.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {AccessControlUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {IProposalManagement} from \"../interfaces/IProposalManagement.sol\";\nimport {IComplianceRegistryStub} from \"../interfaces/IComplianceRegistryStub.sol\";\nimport {IGuardianNode} from \"../interfaces/IGuardianNode.sol\";\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\nerror ProposalManagement__AlreadyExistProposal(bytes32 proposalId);\nerror ProposalManagement__InvalidSignature();\nerror ProposalManagement__OnlyVoteForPendingProposal();\n\ncontract ProposalManagement is IProposalManagement, AccessControlUpgradeable {\n    bytes32 public constant ADMIN_ROLE =\n        keccak256(\"proposal-management.admin.role\");\n    bytes32 public constant MANAGER_ROLE =\n    keccak256(\"proposal-management.manager.role\");\n    bytes32 public constant SPEAKER_ROLE =\n        keccak256(\"proposal-management.speaker.role\");\n    bytes32 public constant VOTER_ROLE =\n        keccak256(\"proposal-management.voter.role\");\n    bytes32 public constant GUARDIAN_ROLE =\n        keccak256(\"proposal-management.guardian.role\");\n\n    uint256 public constant EXPIRY_DAYS = 7 days;\n\n    bytes32[] public proposalIdList;\n    mapping(bytes32 => ProposalCommon.Proposal) public proposals;\n    IGuardianNode public sentry;\n    mapping(bytes => IComplianceRegistryStub) public stubs;\n\n    function initialize(address _admin, IGuardianNode guardianNode)\n        public\n        initializer\n    {\n        _grantRole(ADMIN_ROLE, _admin);\n        _setRoleAdmin(MANAGER_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(SPEAKER_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(VOTER_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(GUARDIAN_ROLE, ADMIN_ROLE);\n        sentry = IGuardianNode(guardianNode);\n    }\n\n    function updateRegionComplianceRegistryStub(string memory region, IComplianceRegistryStub stub)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        bytes memory regionBytes = bytes(region);\n        stubs[regionBytes] = stub;\n\n        emit UpdateRegionComplianceRegistryStub(region, regionBytes, address(stub));\n    }\n\n    function createProposal(\n        bytes32 proposalId,\n        bytes[] calldata targets,\n        bool isWhitelist,\n        string calldata region,\n        string calldata description,\n        bytes calldata signature\n    ) external override onlyRole(SPEAKER_ROLE) {\n        if (\n            proposals[proposalId].status !=\n            ProposalCommon.ProposalStatus.Unknown\n        ) {\n            revert ProposalManagement__AlreadyExistProposal(proposalId);\n        }\n        bytes memory targetBytes;\n        for (uint i = 0; i < targets.length; i++) {\n            targetBytes = abi.encodePacked(targetBytes, targets[i]);\n        }\n        bytes32 hash = keccak256(\n            abi.encodePacked(proposalId, targetBytes, isWhitelist)\n        );\n        if (ECDSA.recover(hash, signature) != _msgSender())\n            revert ProposalManagement__InvalidSignature();\n\n        // add proposalId into global list\n        proposalIdList.push(proposalId);\n        proposals[proposalId] = ProposalCommon.Proposal({\n            id: proposalId,\n            author: _msgSender(),\n            targets: targets,\n            isWhitelist: isWhitelist,\n            description: description,\n            region: region,\n            timestamp: block.timestamp,\n            status: ProposalCommon.ProposalStatus.Pending,\n            signature: signature,\n            voters: 0,\n            activeNodes: sentry.activeNodes()\n        });\n    }\n\n    function voteAndConfirmProposals(\n        bytes32[] calldata proposalIds\n    ) external override onlyRole(VOTER_ROLE) {\n        for (uint256 idx = 0; idx < proposalIds.length; idx++) {\n            bytes32 proposalId = proposalIds[idx];\n            if (\n                proposals[proposalId].status !=\n                ProposalCommon.ProposalStatus.Pending\n            ) revert ProposalManagement__OnlyVoteForPendingProposal();\n            proposals[proposalId].voters += 1;\n            if (\n                proposals[proposalId].voters * 2 >\n                proposals[proposalId].activeNodes\n            ) {\n                proposals[proposalId].status = ProposalCommon\n                    .ProposalStatus\n                    .Approved;\n            }\n            if (\n                proposals[proposalId].status ==\n                ProposalCommon.ProposalStatus.Approved\n            ) {\n                IComplianceRegistryStub stub = stubs[bytes(proposals[proposalId].region)];\n                stub.confirmProposal(proposals[proposalId]);\n                emit ConfirmProposal(proposalId);\n            }\n        }\n    }\n\n    function rejectExpiredProposals(\n        bytes32[] calldata expiredProposalIds\n    ) external override onlyRole(GUARDIAN_ROLE) {\n        for (uint256 idx = 0; idx < expiredProposalIds.length; idx++) {\n            bytes32 proposalId = expiredProposalIds[idx];\n            if (\n                proposals[proposalId].status !=\n                ProposalCommon.ProposalStatus.Pending\n            ) continue;\n            // double check expired timestamp\n            if (\n                proposals[proposalId].timestamp + EXPIRY_DAYS >= block.timestamp\n            ) {\n                proposals[proposalId].status = ProposalCommon\n                    .ProposalStatus\n                    .Rejected;\n                emit RejectProposal(proposalId);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": false
      }
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}