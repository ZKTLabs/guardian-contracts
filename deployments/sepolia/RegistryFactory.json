{
  "address": "0x29A90662f6EaA585787EdcdeF3FAe2149e8Cb152",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Create2EmptyBytecode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Create2FailedDeployment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "Create2InsufficientBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMPLIANCE_REGISTRY_STUB_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stub",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isWhitelist",
          "type": "bool"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isWhitelist",
          "type": "bool"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ebdf8fbdc2affa6783f409efe3d47fcc469200fa1864cd52176fef1f1591f41",
  "receipt": {
    "to": null,
    "from": "0xdfcb98d66336084326Bf69a0e55Ed15c2Ae24008",
    "contractAddress": "0x29A90662f6EaA585787EdcdeF3FAe2149e8Cb152",
    "transactionIndex": 41,
    "gasUsed": "2341532",
    "logsBloom": "0x
    "blockHash": "0x2a47b39f5cfd1ba7c7a7af6977e4c051c298f2adef65d85ee25433f067462da5",
    "transactionHash": "0x6ebdf8fbdc2affa6783f409efe3d47fcc469200fa1864cd52176fef1f1591f41",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 5730226,
        "transactionHash": "0x6ebdf8fbdc2affa6783f409efe3d47fcc469200fa1864cd52176fef1f1591f41",
        "address": "0x29A90662f6EaA585787EdcdeF3FAe2149e8Cb152",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfccdaf605b6a548a6761df480c8f02168106d2c75426fdd37e8f3e89e7fdb34a",
          "0x000000000000000000000000dfcb98d66336084326bf69a0e55ed15c2ae24008",
          "0x000000000000000000000000dfcb98d66336084326bf69a0e55ed15c2ae24008"
        ],
        "data": "0x",
        "logIndex": 58,
        "blockHash": "0x2a47b39f5cfd1ba7c7a7af6977e4c051c298f2adef65d85ee25433f067462da5"
      },
      {
        "transactionIndex": 41,
        "blockNumber": 5730226,
        "transactionHash": "0x6ebdf8fbdc2affa6783f409efe3d47fcc469200fa1864cd52176fef1f1591f41",
        "address": "0x29A90662f6EaA585787EdcdeF3FAe2149e8Cb152",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xfaff885d0c08aaa824d1e15e24546ea49e586972365d88082dd68e9f3fca1ae6",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xfccdaf605b6a548a6761df480c8f02168106d2c75426fdd37e8f3e89e7fdb34a"
        ],
        "data": "0x",
        "logIndex": 59,
        "blockHash": "0x2a47b39f5cfd1ba7c7a7af6977e4c051c298f2adef65d85ee25433f067462da5"
      }
    ],
    "blockNumber": 5730226,
    "cumulativeGasUsed": "12860439",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdfcb98d66336084326Bf69a0e55Ed15c2Ae24008",
    "27369457398084356532687430287825926251293701745827216932283700223200854799805"
  ],
  "numDeployments": 1,
  "solcInputHash": "846be173ac1b7bacf9d376991f8fc1d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Create2EmptyBytecode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Create2FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"Create2InsufficientBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPLIANCE_REGISTRY_STUB_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stub\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelist\",\"type\":\"bool\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelist\",\"type\":\"bool\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"Create2EmptyBytecode()\":[{\"details\":\"There's no code to deploy.\"}],\"Create2FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"Create2InsufficientBalance(uint256,uint256)\":[{\"details\":\"Not enough balance for performing a CREATE2 deploy.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/RegistryFactory.sol\":\"RegistryFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b9807d194b92f1068d868e9587d27037264a9a067c778486f86ae21c61cbd5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/interfaces/IComplianceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ProposalCommon} from \\\"../libraries/ProposalCommon.sol\\\";\\n\\ninterface IComplianceEvent {\\n    event AddProposalToAnotherNetworkList(\\n        bool isWhitelistRegistry,\\n        bytes data,\\n        bytes32 networkHash\\n    );\\n}\\n\\ninterface IComplianceEntry {\\n    struct Compliance {\\n        bytes32 proposalId;\\n        address target;\\n        address author;\\n        bool isInList;\\n    }\\n}\\n\\ninterface IComplianceRegistry is IComplianceEntry, IComplianceEvent {\\n    function addProposalToList(\\n        ProposalCommon.Proposal memory proposal\\n    ) external;\\n\\n    function checkCompliance(address account) external view returns (bool);\\n\\n    function isExceed() external view returns (bool);\\n\\n    function decodeBytes(bytes memory data) external view returns (address);\\n}\\n\",\"keccak256\":\"0xafe18ca2ddb1e486a9c7336772cc94511e332073db8be92a6f2e420550ce2d49\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ProposalCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary ProposalCommon {\\n    enum ProposalStatus {\\n        Unknown,\\n        Pending,\\n        Approved,\\n        Rejected\\n    }\\n\\n    struct Proposal {\\n        bytes32 id;\\n        address author;\\n        bytes[] targets;\\n        bool isWhitelist;\\n        string region;\\n        uint256 timestamp;\\n        ProposalStatus status;\\n        bytes signature;\\n        uint256 voters;\\n        uint256 activeNodes;\\n    }\\n}\\n\",\"keccak256\":\"0x94bcf8bad096852ab6afc2ccabc00ff3a8c8efbe15d019235620f097930e78d1\",\"license\":\"UNLICENSED\"},\"contracts/oracle/BlacklistComplianceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {ComplianceRegistry} from \\\"./ComplianceRegistry.sol\\\";\\n\\ncontract BlacklistComplianceRegistry is ComplianceRegistry {\\n    bool private isWhitelist = false;\\n}\\n\",\"keccak256\":\"0x1088df174616d3c570ecff7a521fd6a68db43cb94f02077cf5461461decbc899\",\"license\":\"MIT\"},\"contracts/oracle/ComplianceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {IComplianceRegistry} from \\\"../interfaces/IComplianceRegistry.sol\\\";\\nimport {ProposalCommon} from \\\"../libraries/ProposalCommon.sol\\\";\\n\\nabstract contract ComplianceRegistry is\\n    IComplianceRegistry,\\n    AccessControl,\\n    Initializable\\n{\\n    bytes32 public constant ADMIN_ROLE =\\n        keccak256(\\\"compliance-registry.admin.role\\\");\\n    bytes32 public constant COMPLIANCE_REGISTRY_STUB_ROLE =\\n        keccak256(\\\"compliance-registry.stub.role\\\");\\n\\n    struct Slot {\\n        uint256 maxComplianceCount;\\n        uint256 complianceCount;\\n    }\\n    Slot public slot;\\n    mapping(bytes32 => bool) public compliance;\\n\\n    function initialize(address _admin, address _stub) public initializer {\\n        _grantRole(ADMIN_ROLE, _admin);\\n        _grantRole(COMPLIANCE_REGISTRY_STUB_ROLE, _stub);\\n        _setRoleAdmin(COMPLIANCE_REGISTRY_STUB_ROLE, ADMIN_ROLE);\\n    }\\n\\n    function addProposalToList(\\n        ProposalCommon.Proposal memory proposal\\n    ) external override onlyRole(COMPLIANCE_REGISTRY_STUB_ROLE) {\\n        for (uint256 idx = 0; idx < proposal.targets.length; idx++) {\\n            bytes memory data = proposal.targets[idx];\\n            address target = decodeBytes(data);\\n            bytes32 addressKey = getAddressKey(target);\\n            if (target == address(0) || compliance[addressKey]) continue;\\n            compliance[addressKey] = true;\\n        }\\n    }\\n\\n    function getAddressKey(address account) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(account, \\\"ZKT\\\"));\\n    }\\n\\n    function isExceed() external view override returns (bool) {\\n        return slot.complianceCount >= slot.maxComplianceCount;\\n    }\\n\\n    function checkCompliance(\\n        address account\\n    ) external view override returns (bool) {\\n        return compliance[getAddressKey(account)];\\n    }\\n\\n    function decodeBytes(\\n        bytes memory data\\n    ) public pure override returns (address) {\\n        bytes memory addressBytes = abi.decode(data, (bytes));\\n        return abi.decode(addressBytes, (address));\\n    }\\n}\\n\",\"keccak256\":\"0xa71bc7c5cfb380f03fe46d68477c292fc27d08cbe2e4401adfeb7e221c2766a5\",\"license\":\"UNLICENSED\"},\"contracts/oracle/RegistryFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport {WhitelistComplianceRegistry} from \\\"./WhitelistComplianceRegistry.sol\\\";\\nimport {BlacklistComplianceRegistry} from \\\"./BlacklistComplianceRegistry.sol\\\";\\nimport {ComplianceRegistry} from \\\"./ComplianceRegistry.sol\\\";\\n\\ncontract RegistryFactory is AccessControl {\\n    bytes32 public constant ADMIN_ROLE =\\n        keccak256(\\\"registry-factory.admin.role\\\");\\n    bytes32 public constant COMPLIANCE_REGISTRY_STUB_ROLE =\\n        keccak256(\\\"registry-factory.stub.role\\\");\\n\\n    struct Slot {\\n        address admin;\\n        uint256 base;\\n    }\\n\\n    Slot slot;\\n\\n    constructor(address admin, uint256 base) {\\n        _grantRole(ADMIN_ROLE, admin);\\n\\n        _setRoleAdmin(COMPLIANCE_REGISTRY_STUB_ROLE, ADMIN_ROLE);\\n        slot = Slot({admin: admin, base: base});\\n        require(hasRole(ADMIN_ROLE, admin));\\n    }\\n\\n    function getByteCode(\\n        bool _isWhitelist\\n    ) internal pure returns (bytes memory) {\\n        return\\n            _isWhitelist\\n                ? abi.encodePacked(\\n                    type(WhitelistComplianceRegistry).creationCode\\n                )\\n                : abi.encodePacked(\\n                    type(BlacklistComplianceRegistry).creationCode\\n                );\\n    }\\n\\n    function getByteCodeHash(\\n        bool _isWhitelist\\n    ) internal pure returns (bytes32) {\\n        return keccak256(getByteCode(_isWhitelist));\\n    }\\n\\n    function deploy(\\n        uint256 index,\\n        address _stub,\\n        bool _isWhitelist\\n    ) external onlyRole(COMPLIANCE_REGISTRY_STUB_ROLE) returns (address, bool) {\\n        bytes32 salt = bytes32(index + slot.base);\\n        bytes memory bytecode = getByteCode(_isWhitelist);\\n        address registry = Create2.computeAddress(salt, keccak256(bytecode));\\n        uint256 codeSize;\\n        assembly {\\n            codeSize := extcodesize(registry)\\n        }\\n        if (codeSize == 0) {\\n            Create2.deploy(0, salt, bytecode);\\n            ComplianceRegistry(registry).initialize(slot.admin, _stub);\\n            return (registry, true);\\n        }\\n        return (registry, false);\\n    }\\n\\n    function get(\\n        uint256 index,\\n        bool _isWhitelist\\n    ) public view returns (address, bool) {\\n        bytes32 salt = bytes32(index + slot.base);\\n        bytes32 bytecodeHash = getByteCodeHash(_isWhitelist);\\n        address registry = Create2.computeAddress(salt, bytecodeHash);\\n        uint256 codeSize;\\n        assembly {\\n            codeSize := extcodesize(registry)\\n        }\\n        return (registry, codeSize == 0);\\n    }\\n}\\n\",\"keccak256\":\"0xd4f9c9127b003f2957ec3392897b13b1a1c695a514ace50c9bec37658ebee9cb\",\"license\":\"MIT\"},\"contracts/oracle/WhitelistComplianceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {ComplianceRegistry} from \\\"./ComplianceRegistry.sol\\\";\\n\\ncontract WhitelistComplianceRegistry is ComplianceRegistry {\\n    bool private isWhitelist = true;\\n}\\n\",\"keccak256\":\"0x68f9d0b16836626b560071cc696221e4e5f0600883faa38d62c217f571084f20\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002a3b38038062002a3b833981016040819052620000349162000247565b6200004f60008051602062002a1b8339815191528362000100565b506200008b7ffaff885d0c08aaa824d1e15e24546ea49e586972365d88082dd68e9f3fca1ae660008051602062002a1b833981519152620001af565b6040805180820182526001600160a01b0384168082526020918201849052600180546001600160a01b03191682179055600284905560009081527f09bf525e463116699876caa3bd1c139c3db97314f5888c842c310313df44a3ac909152205460ff16620000f857600080fd5b50506200028a565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16620001a5576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556200015c3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001620001a9565b5060005b92915050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160a01b038216620001a9565b6200021781620001fa565b81146200022357600080fd5b50565b8051620001a9816200020c565b8062000217565b8051620001a98162000233565b600080604083850312156200025f576200025f600080fd5b60006200026d858562000226565b925050602062000280858286016200023a565b9150509250929050565b612781806200029a6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806375b238fc1161007157806375b238fc1461015057806391d1485414610177578063a217fddf1461018a578063ce97870a14610192578063d547741f146101a5578063ef14981b146101b857600080fd5b806301ffc9a7146100ae578063248a9ca3146100d75780632d5421ba146101075780632f2ff15d1461012857806336568abe1461013d575b600080fd5b6100c16100bc3660046106e9565b6101df565b6040516100ce919061071c565b60405180910390f35b6100fa6100e536600461073b565b60009081526020819052604090206001015490565b6040516100ce9190610762565b61011a6101153660046107a8565b610216565b6040516100ce929190610801565b61013b61013636600461081c565b610318565b005b61013b61014b36600461081c565b610343565b6100fa7ffccdaf605b6a548a6761df480c8f02168106d2c75426fdd37e8f3e89e7fdb34a81565b6100c161018536600461081c565b61037b565b6100fa600081565b61011a6101a0366004610859565b6103a4565b61013b6101b336600461081c565b6103e3565b6100fa7ffaff885d0c08aaa824d1e15e24546ea49e586972365d88082dd68e9f3fca1ae681565b60006001600160e01b03198216637965db0b60e01b148061021057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000807ffaff885d0c08aaa824d1e15e24546ea49e586972365d88082dd68e9f3fca1ae661024381610408565b60025460009061025390886108a2565b9050600061026086610415565b905060006102758383805190602001206104a7565b9050803b60008190036103055761028e600085856104bb565b5060015460405163485cc95560e01b81526001600160a01b038481169263485cc955926102c392909116908d906004016108b5565b600060405180830381600087803b1580156102dd57600080fd5b505af11580156102f1573d6000803e3d6000fd5b50505050816001965096505050505061030f565b5094506000935050505b50935093915050565b60008281526020819052604090206001015461033381610408565b61033d838361053f565b50505050565b6001600160a01b038116331461036c5760405163334bd91960e11b815260040160405180910390fd5b61037682826105d1565b505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008060006001800154856103b991906108a2565b905060006103c68561063c565b905060006103d483836104a7565b97883b15975095505050505050565b6000828152602081905260409020600101546103fe81610408565b61033d83836105d1565b6104128133610655565b50565b6060816104615760405161042b602082016106ad565b601f1982820381018352601f90910116604081905261044d9190602001610916565b604051602081830303815290604052610210565b604051610470602082016106ba565b601f1982820381018352601f9091011660408190526104929190602001610916565b60405160208183030381529060405292915050565b60006104b4838330610684565b9392505050565b6000834710156104eb57478460405163392efb2b60e21b81526004016104e2929190610922565b60405180910390fd5b815160000361050d57604051631328927760e21b815260040160405180910390fd5b8282516020840186f590506001600160a01b0381166104b457604051633a0ba96160e11b815260040160405180910390fd5b600061054b838361037b565b6105c9576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556105813390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610210565b506000610210565b60006105dd838361037b565b156105c9576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610210565b600061064782610415565b805190602001209050919050565b61065f828261037b565b61068057808260405163e2517d3f60e01b81526004016104e292919061093d565b5050565b6000604051836040820152846020820152828152600b810160ff81536055902095945050505050565b610f138061094c83390190565b610f168061185f83390190565b6001600160e01b031981165b811461041257600080fd5b8035610210816106c7565b6000602082840312156106fe576106fe600080fd5b600061070a84846106de565b949350505050565b8015155b82525050565b602081016102108284610712565b806106d3565b80356102108161072a565b60006020828403121561075057610750600080fd5b600061070a8484610730565b80610716565b60208101610210828461075c565b60006001600160a01b038216610210565b6106d381610770565b803561021081610781565b8015156106d3565b803561021081610795565b6000806000606084860312156107c0576107c0600080fd5b60006107cc8686610730565b93505060206107dd8682870161078a565b92505060406107ee8682870161079d565b9150509250925092565b61071681610770565b6040810161080f82856107f8565b6104b46020830184610712565b6000806040838503121561083257610832600080fd5b600061083e8585610730565b925050602061084f8582860161078a565b9150509250929050565b6000806040838503121561086f5761086f600080fd5b600061087b8585610730565b925050602061084f8582860161079d565b634e487b7160e01b600052601160045260246000fd5b808201808211156102105761021061088c565b604081016108c382856107f8565b6104b460208301846107f8565b60005b838110156108eb5781810151838201526020016108d3565b50506000910152565b60006108fe825190565b61090c8185602086016108d0565b9290920192915050565b60006104b482846108f4565b60408101610930828561075c565b6104b4602083018461075c565b6040810161093082856107f856fe60806040526004805460ff1916905534801561001a57600080fd5b50610ee98061002a6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806336568abe116100a257806391d148541161007157806391d148541461025d578063a217fddf14610270578063a641c95d14610278578063d547741f1461028b578063ef14981b1461029e57600080fd5b806336568abe14610203578063485cc955146102165780636d73dc991461022957806375b238fc1461023657600080fd5b8063248a9ca3116100de578063248a9ca31461018a5780632a95ae36146101ba5780632c289dcf146101dd5780632f2ff15d146101f057600080fd5b806301ffc9a71461011057806306d57de114610139578063197621ce1461014e5780631a88bc661461016e575b600080fd5b61012361011e366004610821565b6102b3565b6040516101309190610854565b60405180910390f35b61014c610147366004610bb8565b6102ea565b005b61016161015c366004610bf2565b6103b2565b6040516101309190610c35565b60015460025461017c919082565b604051610130929190610c49565b6101ad610198366004610c64565b60009081526020819052604090206001015490565b6040516101309190610c85565b6101236101c8366004610c64565b60036020526000908152604090205460ff1681565b6101236101eb366004610c93565b6103e6565b61014c6101fe366004610cb4565b61040f565b61014c610211366004610cb4565b61043a565b61014c610224366004610cf1565b61046d565b6001546002541015610123565b6101ad7fc65cb4995d6fc41c7db842b9726f58b89759332adaed7c94d4d438b6df976cd881565b61012361026b366004610cb4565b6105f4565b6101ad600081565b6101ad610286366004610c93565b61061d565b61014c610299366004610cb4565b61064d565b6101ad600080516020610ebd83398151915281565b60006001600160e01b03198216637965db0b60e01b14806102e457506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020610ebd83398151915261030281610672565b60005b8260400151518110156103ad5760008360400151828151811061032a5761032a610d13565b60200260200101519050600061033f826103b2565b9050600061034c8261061d565b90506001600160a01b0382161580610372575060008181526003602052604090205460ff165b1561037f5750505061039b565b6000908152600360205260409020805460ff1916600117905550505b806103a581610d3f565b915050610305565b505050565b600080828060200190518101906103c99190610dd5565b9050808060200190518101906103df9190610e1a565b9392505050565b6000600360006103f58461061d565b815260208101919091526040016000205460ff1692915050565b60008281526020819052604090206001015461042a81610672565b610434838361067f565b50505050565b6001600160a01b03811633146104635760405163334bd91960e11b815260040160405180910390fd5b6103ad8282610711565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156104b25750825b90506000826001600160401b031660011480156104ce5750303b155b9050811580156104dc575080155b156104fa5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561052457845460ff60401b1916600160401b1785555b61054e7fc65cb4995d6fc41c7db842b9726f58b89759332adaed7c94d4d438b6df976cd88861067f565b50610567600080516020610ebd8339815191528761067f565b506105a0600080516020610ebd8339815191527fc65cb4995d6fc41c7db842b9726f58b89759332adaed7c94d4d438b6df976cd861077c565b83156105eb57845460ff60401b191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906105e290600190610e55565b60405180910390a15b50505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000816040516020016106309190610e8b565b604051602081830303815290604052805190602001209050919050565b60008281526020819052604090206001015461066881610672565b6104348383610711565b61067c81336107c7565b50565b600061068b83836105f4565b610709576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556106c13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016102e4565b5060006102e4565b600061071d83836105f4565b15610709576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016102e4565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6107d182826105f4565b6107fb57808260405163e2517d3f60e01b81526004016107f2929190610eae565b60405180910390fd5b5050565b6001600160e01b031981165b811461067c57600080fd5b80356102e4816107ff565b60006020828403121561083657610836600080fd5b60006108428484610816565b949350505050565b8015155b82525050565b602081016102e4828461084a565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b038211171561089d5761089d610862565b6040525050565b60006108af60405190565b90506108bb8282610878565b919050565b8061080b565b80356102e4816108c0565b60006001600160a01b0382166102e4565b61080b816108d1565b80356102e4816108e2565b60006001600160401b0382111561090f5761090f610862565b5060209081020190565b60006001600160401b0382111561093257610932610862565b601f19601f83011660200192915050565b82818337506000910152565b600061096261095d84610919565b6108a4565b90508281526020810184848401111561097d5761097d600080fd5b610988848285610943565b509392505050565b600082601f8301126109a4576109a4600080fd5b813561084284826020860161094f565b60006109c261095d846108f6565b838152905060208082019084028301858111156109e1576109e1600080fd5b835b81811015610a215780356001600160401b03811115610a0457610a04600080fd5b808601610a118982610990565b85525050602092830192016109e3565b5050509392505050565b600082601f830112610a3f57610a3f600080fd5b81356108428482602086016109b4565b80151561080b565b80356102e481610a4f565b6004811061067c57600080fd5b80356102e481610a62565b60006101408284031215610a9057610a90600080fd5b610a9b6101406108a4565b90506000610aa984846108c6565b8252506020610aba848483016108eb565b60208301525060408201356001600160401b03811115610adc57610adc600080fd5b610ae884828501610a2b565b6040830152506060610afc84828501610a57565b60608301525060808201356001600160401b03811115610b1e57610b1e600080fd5b610b2a84828501610990565b60808301525060a0610b3e848285016108c6565b60a08301525060c0610b5284828501610a6f565b60c08301525060e08201356001600160401b03811115610b7457610b74600080fd5b610b8084828501610990565b60e083015250610100610b95848285016108c6565b61010083015250610120610bab848285016108c6565b6101208301525092915050565b600060208284031215610bcd57610bcd600080fd5b81356001600160401b03811115610be657610be6600080fd5b61084284828501610a7a565b600060208284031215610c0757610c07600080fd5b81356001600160401b03811115610c2057610c20600080fd5b61084284828501610990565b61084e816108d1565b602081016102e48284610c2c565b8061084e565b60408101610c578285610c43565b6103df6020830184610c43565b600060208284031215610c7957610c79600080fd5b600061084284846108c6565b602081016102e48284610c43565b600060208284031215610ca857610ca8600080fd5b600061084284846108eb565b60008060408385031215610cca57610cca600080fd5b6000610cd685856108c6565b9250506020610ce7858286016108eb565b9150509250929050565b60008060408385031215610d0757610d07600080fd5b6000610cd685856108eb565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198203610d5257610d52610d29565b5060010190565b60005b83811015610d74578181015183820152602001610d5c565b50506000910152565b6000610d8b61095d84610919565b905082815260208101848484011115610da657610da6600080fd5b610988848285610d59565b600082601f830112610dc557610dc5600080fd5b8151610842848260208601610d7d565b600060208284031215610dea57610dea600080fd5b81516001600160401b03811115610e0357610e03600080fd5b61084284828501610db1565b80516102e4816108e2565b600060208284031215610e2f57610e2f600080fd5b60006108428484610e0f565b60006001600160401b0382166102e4565b61084e81610e3b565b602081016102e48284610e4c565b60006102e48260601b90565b60006102e482610e63565b61084e610e86826108d1565b610e6f565b6000610e978284610e7a565b621692d560ea1b60148301908152916017016103df565b60408101610c578285610c2c56fec08ca0c89b9e943c8b9dcb9510274b54fcefeb3db9d7beba42dcfb6d3bf3e52ca164736f6c6343000814000a60806040526004805460ff1916600117905534801561001d57600080fd5b50610ee98061002d6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806336568abe116100a257806391d148541161007157806391d148541461025d578063a217fddf14610270578063a641c95d14610278578063d547741f1461028b578063ef14981b1461029e57600080fd5b806336568abe14610203578063485cc955146102165780636d73dc991461022957806375b238fc1461023657600080fd5b8063248a9ca3116100de578063248a9ca31461018a5780632a95ae36146101ba5780632c289dcf146101dd5780632f2ff15d146101f057600080fd5b806301ffc9a71461011057806306d57de114610139578063197621ce1461014e5780631a88bc661461016e575b600080fd5b61012361011e366004610821565b6102b3565b6040516101309190610854565b60405180910390f35b61014c610147366004610bb8565b6102ea565b005b61016161015c366004610bf2565b6103b2565b6040516101309190610c35565b60015460025461017c919082565b604051610130929190610c49565b6101ad610198366004610c64565b60009081526020819052604090206001015490565b6040516101309190610c85565b6101236101c8366004610c64565b60036020526000908152604090205460ff1681565b6101236101eb366004610c93565b6103e6565b61014c6101fe366004610cb4565b61040f565b61014c610211366004610cb4565b61043a565b61014c610224366004610cf1565b61046d565b6001546002541015610123565b6101ad7fc65cb4995d6fc41c7db842b9726f58b89759332adaed7c94d4d438b6df976cd881565b61012361026b366004610cb4565b6105f4565b6101ad600081565b6101ad610286366004610c93565b61061d565b61014c610299366004610cb4565b61064d565b6101ad600080516020610ebd83398151915281565b60006001600160e01b03198216637965db0b60e01b14806102e457506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020610ebd83398151915261030281610672565b60005b8260400151518110156103ad5760008360400151828151811061032a5761032a610d13565b60200260200101519050600061033f826103b2565b9050600061034c8261061d565b90506001600160a01b0382161580610372575060008181526003602052604090205460ff165b1561037f5750505061039b565b6000908152600360205260409020805460ff1916600117905550505b806103a581610d3f565b915050610305565b505050565b600080828060200190518101906103c99190610dd5565b9050808060200190518101906103df9190610e1a565b9392505050565b6000600360006103f58461061d565b815260208101919091526040016000205460ff1692915050565b60008281526020819052604090206001015461042a81610672565b610434838361067f565b50505050565b6001600160a01b03811633146104635760405163334bd91960e11b815260040160405180910390fd5b6103ad8282610711565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156104b25750825b90506000826001600160401b031660011480156104ce5750303b155b9050811580156104dc575080155b156104fa5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561052457845460ff60401b1916600160401b1785555b61054e7fc65cb4995d6fc41c7db842b9726f58b89759332adaed7c94d4d438b6df976cd88861067f565b50610567600080516020610ebd8339815191528761067f565b506105a0600080516020610ebd8339815191527fc65cb4995d6fc41c7db842b9726f58b89759332adaed7c94d4d438b6df976cd861077c565b83156105eb57845460ff60401b191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906105e290600190610e55565b60405180910390a15b50505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000816040516020016106309190610e8b565b604051602081830303815290604052805190602001209050919050565b60008281526020819052604090206001015461066881610672565b6104348383610711565b61067c81336107c7565b50565b600061068b83836105f4565b610709576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556106c13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016102e4565b5060006102e4565b600061071d83836105f4565b15610709576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016102e4565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6107d182826105f4565b6107fb57808260405163e2517d3f60e01b81526004016107f2929190610eae565b60405180910390fd5b5050565b6001600160e01b031981165b811461067c57600080fd5b80356102e4816107ff565b60006020828403121561083657610836600080fd5b60006108428484610816565b949350505050565b8015155b82525050565b602081016102e4828461084a565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b038211171561089d5761089d610862565b6040525050565b60006108af60405190565b90506108bb8282610878565b919050565b8061080b565b80356102e4816108c0565b60006001600160a01b0382166102e4565b61080b816108d1565b80356102e4816108e2565b60006001600160401b0382111561090f5761090f610862565b5060209081020190565b60006001600160401b0382111561093257610932610862565b601f19601f83011660200192915050565b82818337506000910152565b600061096261095d84610919565b6108a4565b90508281526020810184848401111561097d5761097d600080fd5b610988848285610943565b509392505050565b600082601f8301126109a4576109a4600080fd5b813561084284826020860161094f565b60006109c261095d846108f6565b838152905060208082019084028301858111156109e1576109e1600080fd5b835b81811015610a215780356001600160401b03811115610a0457610a04600080fd5b808601610a118982610990565b85525050602092830192016109e3565b5050509392505050565b600082601f830112610a3f57610a3f600080fd5b81356108428482602086016109b4565b80151561080b565b80356102e481610a4f565b6004811061067c57600080fd5b80356102e481610a62565b60006101408284031215610a9057610a90600080fd5b610a9b6101406108a4565b90506000610aa984846108c6565b8252506020610aba848483016108eb565b60208301525060408201356001600160401b03811115610adc57610adc600080fd5b610ae884828501610a2b565b6040830152506060610afc84828501610a57565b60608301525060808201356001600160401b03811115610b1e57610b1e600080fd5b610b2a84828501610990565b60808301525060a0610b3e848285016108c6565b60a08301525060c0610b5284828501610a6f565b60c08301525060e08201356001600160401b03811115610b7457610b74600080fd5b610b8084828501610990565b60e083015250610100610b95848285016108c6565b61010083015250610120610bab848285016108c6565b6101208301525092915050565b600060208284031215610bcd57610bcd600080fd5b81356001600160401b03811115610be657610be6600080fd5b61084284828501610a7a565b600060208284031215610c0757610c07600080fd5b81356001600160401b03811115610c2057610c20600080fd5b61084284828501610990565b61084e816108d1565b602081016102e48284610c2c565b8061084e565b60408101610c578285610c43565b6103df6020830184610c43565b600060208284031215610c7957610c79600080fd5b600061084284846108c6565b602081016102e48284610c43565b600060208284031215610ca857610ca8600080fd5b600061084284846108eb565b60008060408385031215610cca57610cca600080fd5b6000610cd685856108c6565b9250506020610ce7858286016108eb565b9150509250929050565b60008060408385031215610d0757610d07600080fd5b6000610cd685856108eb565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198203610d5257610d52610d29565b5060010190565b60005b83811015610d74578181015183820152602001610d5c565b50506000910152565b6000610d8b61095d84610919565b905082815260208101848484011115610da657610da6600080fd5b610988848285610d59565b600082601f830112610dc557610dc5600080fd5b8151610842848260208601610d7d565b600060208284031215610dea57610dea600080fd5b81516001600160401b03811115610e0357610e03600080fd5b61084284828501610db1565b80516102e4816108e2565b600060208284031215610e2f57610e2f600080fd5b60006108428484610e0f565b60006001600160401b0382166102e4565b61084e81610e3b565b602081016102e48284610e4c565b60006102e48260601b90565b60006102e482610e63565b61084e610e86826108d1565b610e6f565b6000610e978284610e7a565b621692d560ea1b60148301908152916017016103df565b60408101610c578285610c2c56fec08ca0c89b9e943c8b9dcb9510274b54fcefeb3db9d7beba42dcfb6d3bf3e52ca164736f6c6343000814000aa164736f6c6343000814000afccdaf605b6a548a6761df480c8f02168106d2c75426fdd37e8f3e89e7fdb34a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806375b238fc1161007157806375b238fc1461015057806391d1485414610177578063a217fddf1461018a578063ce97870a14610192578063d547741f146101a5578063ef14981b146101b857600080fd5b806301ffc9a7146100ae578063248a9ca3146100d75780632d5421ba146101075780632f2ff15d1461012857806336568abe1461013d575b600080fd5b6100c16100bc3660046106e9565b6101df565b6040516100ce919061071c565b60405180910390f35b6100fa6100e536600461073b565b60009081526020819052604090206001015490565b6040516100ce9190610762565b61011a6101153660046107a8565b610216565b6040516100ce929190610801565b61013b61013636600461081c565b610318565b005b61013b61014b36600461081c565b610343565b6100fa7ffccdaf605b6a548a6761df480c8f02168106d2c75426fdd37e8f3e89e7fdb34a81565b6100c161018536600461081c565b61037b565b6100fa600081565b61011a6101a0366004610859565b6103a4565b61013b6101b336600461081c565b6103e3565b6100fa7ffaff885d0c08aaa824d1e15e24546ea49e586972365d88082dd68e9f3fca1ae681565b60006001600160e01b03198216637965db0b60e01b148061021057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000807ffaff885d0c08aaa824d1e15e24546ea49e586972365d88082dd68e9f3fca1ae661024381610408565b60025460009061025390886108a2565b9050600061026086610415565b905060006102758383805190602001206104a7565b9050803b60008190036103055761028e600085856104bb565b5060015460405163485cc95560e01b81526001600160a01b038481169263485cc955926102c392909116908d906004016108b5565b600060405180830381600087803b1580156102dd57600080fd5b505af11580156102f1573d6000803e3d6000fd5b50505050816001965096505050505061030f565b5094506000935050505b50935093915050565b60008281526020819052604090206001015461033381610408565b61033d838361053f565b50505050565b6001600160a01b038116331461036c5760405163334bd91960e11b815260040160405180910390fd5b61037682826105d1565b505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008060006001800154856103b991906108a2565b905060006103c68561063c565b905060006103d483836104a7565b97883b15975095505050505050565b6000828152602081905260409020600101546103fe81610408565b61033d83836105d1565b6104128133610655565b50565b6060816104615760405161042b602082016106ad565b601f1982820381018352601f90910116604081905261044d9190602001610916565b604051602081830303815290604052610210565b604051610470602082016106ba565b601f1982820381018352601f9091011660408190526104929190602001610916565b60405160208183030381529060405292915050565b60006104b4838330610684565b9392505050565b6000834710156104eb57478460405163392efb2b60e21b81526004016104e2929190610922565b60405180910390fd5b815160000361050d57604051631328927760e21b815260040160405180910390fd5b8282516020840186f590506001600160a01b0381166104b457604051633a0ba96160e11b815260040160405180910390fd5b600061054b838361037b565b6105c9576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556105813390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610210565b506000610210565b60006105dd838361037b565b156105c9576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610210565b600061064782610415565b805190602001209050919050565b61065f828261037b565b61068057808260405163e2517d3f60e01b81526004016104e292919061093d565b5050565b6000604051836040820152846020820152828152600b810160ff81536055902095945050505050565b610f138061094c83390190565b610f168061185f83390190565b6001600160e01b031981165b811461041257600080fd5b8035610210816106c7565b6000602082840312156106fe576106fe600080fd5b600061070a84846106de565b949350505050565b8015155b82525050565b602081016102108284610712565b806106d3565b80356102108161072a565b60006020828403121561075057610750600080fd5b600061070a8484610730565b80610716565b60208101610210828461075c565b60006001600160a01b038216610210565b6106d381610770565b803561021081610781565b8015156106d3565b803561021081610795565b6000806000606084860312156107c0576107c0600080fd5b60006107cc8686610730565b93505060206107dd8682870161078a565b92505060406107ee8682870161079d565b9150509250925092565b61071681610770565b6040810161080f82856107f8565b6104b46020830184610712565b6000806040838503121561083257610832600080fd5b600061083e8585610730565b925050602061084f8582860161078a565b9150509250929050565b6000806040838503121561086f5761086f600080fd5b600061087b8585610730565b925050602061084f8582860161079d565b634e487b7160e01b600052601160045260246000fd5b808201808211156102105761021061088c565b604081016108c382856107f8565b6104b460208301846107f8565b60005b838110156108eb5781810151838201526020016108d3565b50506000910152565b60006108fe825190565b61090c8185602086016108d0565b9290920192915050565b60006104b482846108f4565b60408101610930828561075c565b6104b4602083018461075c565b6040810161093082856107f856fe60806040526004805460ff1916905534801561001a57600080fd5b50610ee98061002a6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806336568abe116100a257806391d148541161007157806391d148541461025d578063a217fddf14610270578063a641c95d14610278578063d547741f1461028b578063ef14981b1461029e57600080fd5b806336568abe14610203578063485cc955146102165780636d73dc991461022957806375b238fc1461023657600080fd5b8063248a9ca3116100de578063248a9ca31461018a5780632a95ae36146101ba5780632c289dcf146101dd5780632f2ff15d146101f057600080fd5b806301ffc9a71461011057806306d57de114610139578063197621ce1461014e5780631a88bc661461016e575b600080fd5b61012361011e366004610821565b6102b3565b6040516101309190610854565b60405180910390f35b61014c610147366004610bb8565b6102ea565b005b61016161015c366004610bf2565b6103b2565b6040516101309190610c35565b60015460025461017c919082565b604051610130929190610c49565b6101ad610198366004610c64565b60009081526020819052604090206001015490565b6040516101309190610c85565b6101236101c8366004610c64565b60036020526000908152604090205460ff1681565b6101236101eb366004610c93565b6103e6565b61014c6101fe366004610cb4565b61040f565b61014c610211366004610cb4565b61043a565b61014c610224366004610cf1565b61046d565b6001546002541015610123565b6101ad7fc65cb4995d6fc41c7db842b9726f58b89759332adaed7c94d4d438b6df976cd881565b61012361026b366004610cb4565b6105f4565b6101ad600081565b6101ad610286366004610c93565b61061d565b61014c610299366004610cb4565b61064d565b6101ad600080516020610ebd83398151915281565b60006001600160e01b03198216637965db0b60e01b14806102e457506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020610ebd83398151915261030281610672565b60005b8260400151518110156103ad5760008360400151828151811061032a5761032a610d13565b60200260200101519050600061033f826103b2565b9050600061034c8261061d565b90506001600160a01b0382161580610372575060008181526003602052604090205460ff165b1561037f5750505061039b565b6000908152600360205260409020805460ff1916600117905550505b806103a581610d3f565b915050610305565b505050565b600080828060200190518101906103c99190610dd5565b9050808060200190518101906103df9190610e1a565b9392505050565b6000600360006103f58461061d565b815260208101919091526040016000205460ff1692915050565b60008281526020819052604090206001015461042a81610672565b610434838361067f565b50505050565b6001600160a01b03811633146104635760405163334bd91960e11b815260040160405180910390fd5b6103ad8282610711565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156104b25750825b90506000826001600160401b031660011480156104ce5750303b155b9050811580156104dc575080155b156104fa5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561052457845460ff60401b1916600160401b1785555b61054e7fc65cb4995d6fc41c7db842b9726f58b89759332adaed7c94d4d438b6df976cd88861067f565b50610567600080516020610ebd8339815191528761067f565b506105a0600080516020610ebd8339815191527fc65cb4995d6fc41c7db842b9726f58b89759332adaed7c94d4d438b6df976cd861077c565b83156105eb57845460ff60401b191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906105e290600190610e55565b60405180910390a15b50505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000816040516020016106309190610e8b565b604051602081830303815290604052805190602001209050919050565b60008281526020819052604090206001015461066881610672565b6104348383610711565b61067c81336107c7565b50565b600061068b83836105f4565b610709576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556106c13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016102e4565b5060006102e4565b600061071d83836105f4565b15610709576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016102e4565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6107d182826105f4565b6107fb57808260405163e2517d3f60e01b81526004016107f2929190610eae565b60405180910390fd5b5050565b6001600160e01b031981165b811461067c57600080fd5b80356102e4816107ff565b60006020828403121561083657610836600080fd5b60006108428484610816565b949350505050565b8015155b82525050565b602081016102e4828461084a565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b038211171561089d5761089d610862565b6040525050565b60006108af60405190565b90506108bb8282610878565b919050565b8061080b565b80356102e4816108c0565b60006001600160a01b0382166102e4565b61080b816108d1565b80356102e4816108e2565b60006001600160401b0382111561090f5761090f610862565b5060209081020190565b60006001600160401b0382111561093257610932610862565b601f19601f83011660200192915050565b82818337506000910152565b600061096261095d84610919565b6108a4565b90508281526020810184848401111561097d5761097d600080fd5b610988848285610943565b509392505050565b600082601f8301126109a4576109a4600080fd5b813561084284826020860161094f565b60006109c261095d846108f6565b838152905060208082019084028301858111156109e1576109e1600080fd5b835b81811015610a215780356001600160401b03811115610a0457610a04600080fd5b808601610a118982610990565b85525050602092830192016109e3565b5050509392505050565b600082601f830112610a3f57610a3f600080fd5b81356108428482602086016109b4565b80151561080b565b80356102e481610a4f565b6004811061067c57600080fd5b80356102e481610a62565b60006101408284031215610a9057610a90600080fd5b610a9b6101406108a4565b90506000610aa984846108c6565b8252506020610aba848483016108eb565b60208301525060408201356001600160401b03811115610adc57610adc600080fd5b610ae884828501610a2b565b6040830152506060610afc84828501610a57565b60608301525060808201356001600160401b03811115610b1e57610b1e600080fd5b610b2a84828501610990565b60808301525060a0610b3e848285016108c6565b60a08301525060c0610b5284828501610a6f565b60c08301525060e08201356001600160401b03811115610b7457610b74600080fd5b610b8084828501610990565b60e083015250610100610b95848285016108c6565b61010083015250610120610bab848285016108c6565b6101208301525092915050565b600060208284031215610bcd57610bcd600080fd5b81356001600160401b03811115610be657610be6600080fd5b61084284828501610a7a565b600060208284031215610c0757610c07600080fd5b81356001600160401b03811115610c2057610c20600080fd5b61084284828501610990565b61084e816108d1565b602081016102e48284610c2c565b8061084e565b60408101610c578285610c43565b6103df6020830184610c43565b600060208284031215610c7957610c79600080fd5b600061084284846108c6565b602081016102e48284610c43565b600060208284031215610ca857610ca8600080fd5b600061084284846108eb565b60008060408385031215610cca57610cca600080fd5b6000610cd685856108c6565b9250506020610ce7858286016108eb565b9150509250929050565b60008060408385031215610d0757610d07600080fd5b6000610cd685856108eb565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198203610d5257610d52610d29565b5060010190565b60005b83811015610d74578181015183820152602001610d5c565b50506000910152565b6000610d8b61095d84610919565b905082815260208101848484011115610da657610da6600080fd5b610988848285610d59565b600082601f830112610dc557610dc5600080fd5b8151610842848260208601610d7d565b600060208284031215610dea57610dea600080fd5b81516001600160401b03811115610e0357610e03600080fd5b61084284828501610db1565b80516102e4816108e2565b600060208284031215610e2f57610e2f600080fd5b60006108428484610e0f565b60006001600160401b0382166102e4565b61084e81610e3b565b602081016102e48284610e4c565b60006102e48260601b90565b60006102e482610e63565b61084e610e86826108d1565b610e6f565b6000610e978284610e7a565b621692d560ea1b60148301908152916017016103df565b60408101610c578285610c2c56fec08ca0c89b9e943c8b9dcb9510274b54fcefeb3db9d7beba42dcfb6d3bf3e52ca164736f6c6343000814000a60806040526004805460ff1916600117905534801561001d57600080fd5b50610ee98061002d6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806336568abe116100a257806391d148541161007157806391d148541461025d578063a217fddf14610270578063a641c95d14610278578063d547741f1461028b578063ef14981b1461029e57600080fd5b806336568abe14610203578063485cc955146102165780636d73dc991461022957806375b238fc1461023657600080fd5b8063248a9ca3116100de578063248a9ca31461018a5780632a95ae36146101ba5780632c289dcf146101dd5780632f2ff15d146101f057600080fd5b806301ffc9a71461011057806306d57de114610139578063197621ce1461014e5780631a88bc661461016e575b600080fd5b61012361011e366004610821565b6102b3565b6040516101309190610854565b60405180910390f35b61014c610147366004610bb8565b6102ea565b005b61016161015c366004610bf2565b6103b2565b6040516101309190610c35565b60015460025461017c919082565b604051610130929190610c49565b6101ad610198366004610c64565b60009081526020819052604090206001015490565b6040516101309190610c85565b6101236101c8366004610c64565b60036020526000908152604090205460ff1681565b6101236101eb366004610c93565b6103e6565b61014c6101fe366004610cb4565b61040f565b61014c610211366004610cb4565b61043a565b61014c610224366004610cf1565b61046d565b6001546002541015610123565b6101ad7fc65cb4995d6fc41c7db842b9726f58b89759332adaed7c94d4d438b6df976cd881565b61012361026b366004610cb4565b6105f4565b6101ad600081565b6101ad610286366004610c93565b61061d565b61014c610299366004610cb4565b61064d565b6101ad600080516020610ebd83398151915281565b60006001600160e01b03198216637965db0b60e01b14806102e457506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020610ebd83398151915261030281610672565b60005b8260400151518110156103ad5760008360400151828151811061032a5761032a610d13565b60200260200101519050600061033f826103b2565b9050600061034c8261061d565b90506001600160a01b0382161580610372575060008181526003602052604090205460ff165b1561037f5750505061039b565b6000908152600360205260409020805460ff1916600117905550505b806103a581610d3f565b915050610305565b505050565b600080828060200190518101906103c99190610dd5565b9050808060200190518101906103df9190610e1a565b9392505050565b6000600360006103f58461061d565b815260208101919091526040016000205460ff1692915050565b60008281526020819052604090206001015461042a81610672565b610434838361067f565b50505050565b6001600160a01b03811633146104635760405163334bd91960e11b815260040160405180910390fd5b6103ad8282610711565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156104b25750825b90506000826001600160401b031660011480156104ce5750303b155b9050811580156104dc575080155b156104fa5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561052457845460ff60401b1916600160401b1785555b61054e7fc65cb4995d6fc41c7db842b9726f58b89759332adaed7c94d4d438b6df976cd88861067f565b50610567600080516020610ebd8339815191528761067f565b506105a0600080516020610ebd8339815191527fc65cb4995d6fc41c7db842b9726f58b89759332adaed7c94d4d438b6df976cd861077c565b83156105eb57845460ff60401b191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906105e290600190610e55565b60405180910390a15b50505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000816040516020016106309190610e8b565b604051602081830303815290604052805190602001209050919050565b60008281526020819052604090206001015461066881610672565b6104348383610711565b61067c81336107c7565b50565b600061068b83836105f4565b610709576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556106c13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016102e4565b5060006102e4565b600061071d83836105f4565b15610709576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016102e4565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6107d182826105f4565b6107fb57808260405163e2517d3f60e01b81526004016107f2929190610eae565b60405180910390fd5b5050565b6001600160e01b031981165b811461067c57600080fd5b80356102e4816107ff565b60006020828403121561083657610836600080fd5b60006108428484610816565b949350505050565b8015155b82525050565b602081016102e4828461084a565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b038211171561089d5761089d610862565b6040525050565b60006108af60405190565b90506108bb8282610878565b919050565b8061080b565b80356102e4816108c0565b60006001600160a01b0382166102e4565b61080b816108d1565b80356102e4816108e2565b60006001600160401b0382111561090f5761090f610862565b5060209081020190565b60006001600160401b0382111561093257610932610862565b601f19601f83011660200192915050565b82818337506000910152565b600061096261095d84610919565b6108a4565b90508281526020810184848401111561097d5761097d600080fd5b610988848285610943565b509392505050565b600082601f8301126109a4576109a4600080fd5b813561084284826020860161094f565b60006109c261095d846108f6565b838152905060208082019084028301858111156109e1576109e1600080fd5b835b81811015610a215780356001600160401b03811115610a0457610a04600080fd5b808601610a118982610990565b85525050602092830192016109e3565b5050509392505050565b600082601f830112610a3f57610a3f600080fd5b81356108428482602086016109b4565b80151561080b565b80356102e481610a4f565b6004811061067c57600080fd5b80356102e481610a62565b60006101408284031215610a9057610a90600080fd5b610a9b6101406108a4565b90506000610aa984846108c6565b8252506020610aba848483016108eb565b60208301525060408201356001600160401b03811115610adc57610adc600080fd5b610ae884828501610a2b565b6040830152506060610afc84828501610a57565b60608301525060808201356001600160401b03811115610b1e57610b1e600080fd5b610b2a84828501610990565b60808301525060a0610b3e848285016108c6565b60a08301525060c0610b5284828501610a6f565b60c08301525060e08201356001600160401b03811115610b7457610b74600080fd5b610b8084828501610990565b60e083015250610100610b95848285016108c6565b61010083015250610120610bab848285016108c6565b6101208301525092915050565b600060208284031215610bcd57610bcd600080fd5b81356001600160401b03811115610be657610be6600080fd5b61084284828501610a7a565b600060208284031215610c0757610c07600080fd5b81356001600160401b03811115610c2057610c20600080fd5b61084284828501610990565b61084e816108d1565b602081016102e48284610c2c565b8061084e565b60408101610c578285610c43565b6103df6020830184610c43565b600060208284031215610c7957610c79600080fd5b600061084284846108c6565b602081016102e48284610c43565b600060208284031215610ca857610ca8600080fd5b600061084284846108eb565b60008060408385031215610cca57610cca600080fd5b6000610cd685856108c6565b9250506020610ce7858286016108eb565b9150509250929050565b60008060408385031215610d0757610d07600080fd5b6000610cd685856108eb565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198203610d5257610d52610d29565b5060010190565b60005b83811015610d74578181015183820152602001610d5c565b50506000910152565b6000610d8b61095d84610919565b905082815260208101848484011115610da657610da6600080fd5b610988848285610d59565b600082601f830112610dc557610dc5600080fd5b8151610842848260208601610d7d565b600060208284031215610dea57610dea600080fd5b81516001600160401b03811115610e0357610e03600080fd5b61084284828501610db1565b80516102e4816108e2565b600060208284031215610e2f57610e2f600080fd5b60006108428484610e0f565b60006001600160401b0382166102e4565b61084e81610e3b565b602081016102e48284610e4c565b60006102e48260601b90565b60006102e482610e63565b61084e610e86826108d1565b610e6f565b6000610e978284610e7a565b621692d560ea1b60148301908152916017016103df565b60408101610c578285610c2c56fec08ca0c89b9e943c8b9dcb9510274b54fcefeb3db9d7beba42dcfb6d3bf3e52ca164736f6c6343000814000aa164736f6c6343000814000a",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "Create2EmptyBytecode()": [
        {
          "details": "There's no code to deploy."
        }
      ],
      "Create2FailedDeployment()": [
        {
          "details": "The deployment failed."
        }
      ],
      "Create2InsufficientBalance(uint256,uint256)": [
        {
          "details": "Not enough balance for performing a CREATE2 deploy."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 729,
        "contract": "contracts/oracle/RegistryFactory.sol:RegistryFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)724_storage)"
      },
      {
        "astId": 2785,
        "contract": "contracts/oracle/RegistryFactory.sol:RegistryFactory",
        "label": "slot",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Slot)2782_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)724_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)724_storage"
      },
      "t_struct(RoleData)724_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 721,
            "contract": "contracts/oracle/RegistryFactory.sol:RegistryFactory",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 723,
            "contract": "contracts/oracle/RegistryFactory.sol:RegistryFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Slot)2782_storage": {
        "encoding": "inplace",
        "label": "struct RegistryFactory.Slot",
        "members": [
          {
            "astId": 2779,
            "contract": "contracts/oracle/RegistryFactory.sol:RegistryFactory",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2781,
            "contract": "contracts/oracle/RegistryFactory.sol:RegistryFactory",
            "label": "base",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}