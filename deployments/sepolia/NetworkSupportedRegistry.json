{
  "address": "0x63e0594cED2a631704D173cD503fc87daFDbbE55",
  "abi": [
    {
      "inputs": [],
      "name": "NetworkSupportedRegistry__NetworkAlreadyExisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NetworkSupportedRegistry__NetworkNotExisted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "networkHash",
          "type": "bytes32"
        }
      ],
      "name": "AddNetworkHash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "AddNetworkName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "networkHash",
          "type": "bytes32"
        }
      ],
      "name": "RevokeNetworkHash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "RevokeNetworkName",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "networkHash",
          "type": "bytes32"
        }
      ],
      "name": "addNetwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "networkName",
          "type": "string"
        }
      ],
      "name": "addNetwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "networkHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "batchAddNetworks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "networkNames",
          "type": "string[]"
        }
      ],
      "name": "batchAddNetworks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "networkHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "batchRevokeNetworks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "networkNames",
          "type": "string[]"
        }
      ],
      "name": "batchRevokeNetworks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "networkName",
          "type": "string"
        }
      ],
      "name": "isNetworkSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "networkHash",
          "type": "bytes32"
        }
      ],
      "name": "isNetworkSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "networkName",
          "type": "string"
        }
      ],
      "name": "revokeNetwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "networkHash",
          "type": "bytes32"
        }
      ],
      "name": "revokeNetwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a4283aee00876582fa2ee954505889279b969e4b1e8deb4d3387f9fcae26c58",
  "receipt": {
    "to": null,
    "from": "0xdfcb98d66336084326Bf69a0e55Ed15c2Ae24008",
    "contractAddress": "0x63e0594cED2a631704D173cD503fc87daFDbbE55",
    "transactionIndex": 88,
    "gasUsed": "753094",
    "logsBloom": "0x
    "blockHash": "0xd3221b4c453eaf215784b57e28f30abdf79cc28ff5e2d594de2fe66267adb440",
    "transactionHash": "0x6a4283aee00876582fa2ee954505889279b969e4b1e8deb4d3387f9fcae26c58",
    "logs": [
      {
        "transactionIndex": 88,
        "blockNumber": 5668344,
        "transactionHash": "0x6a4283aee00876582fa2ee954505889279b969e4b1e8deb4d3387f9fcae26c58",
        "address": "0x63e0594cED2a631704D173cD503fc87daFDbbE55",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dfcb98d66336084326bf69a0e55ed15c2ae24008"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0xd3221b4c453eaf215784b57e28f30abdf79cc28ff5e2d594de2fe66267adb440"
      }
    ],
    "blockNumber": 5668344,
    "cumulativeGasUsed": "19140435",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "387566222cbc4220ad44d58d502d8496",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NetworkSupportedRegistry__NetworkAlreadyExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NetworkSupportedRegistry__NetworkNotExisted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"networkHash\",\"type\":\"bytes32\"}],\"name\":\"AddNetworkHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"AddNetworkName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"networkHash\",\"type\":\"bytes32\"}],\"name\":\"RevokeNetworkHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"RevokeNetworkName\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"networkHash\",\"type\":\"bytes32\"}],\"name\":\"addNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"networkName\",\"type\":\"string\"}],\"name\":\"addNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"networkHashes\",\"type\":\"bytes32[]\"}],\"name\":\"batchAddNetworks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"networkNames\",\"type\":\"string[]\"}],\"name\":\"batchAddNetworks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"networkHashes\",\"type\":\"bytes32[]\"}],\"name\":\"batchRevokeNetworks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"networkNames\",\"type\":\"string[]\"}],\"name\":\"batchRevokeNetworks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"networkName\",\"type\":\"string\"}],\"name\":\"isNetworkSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"networkHash\",\"type\":\"bytes32\"}],\"name\":\"isNetworkSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"networkName\",\"type\":\"string\"}],\"name\":\"revokeNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"networkHash\",\"type\":\"bytes32\"}],\"name\":\"revokeNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/NetworkSupportedRegistry.sol\":\"NetworkSupportedRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/INetworkSupportedRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface INetworkSupportedRegistryEvent {\\n\\n    event AddNetworkHash(bytes32 networkHash);\\n\\n    event AddNetworkName(string, bytes32);\\n\\n    event RevokeNetworkHash(bytes32 networkHash);\\n\\n    event RevokeNetworkName(string, bytes32);\\n}\\n\\ninterface INetworkSupportedRegistry is INetworkSupportedRegistryEvent {\\n\\n    function isNetworkSupported(bytes32 networkHash) external view returns (bool);\\n\\n    function isNetworkSupported(string memory networkName) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcdedb066a8550a2aee245f7c2ca517bac462a918354b9293bf02b7ea608efd8b\",\"license\":\"UNLICENSED\"},\"contracts/oracle/NetworkSupportedRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {INetworkSupportedRegistry} from \\\"../interfaces/INetworkSupportedRegistry.sol\\\";\\n\\nerror NetworkSupportedRegistry__NetworkAlreadyExisted();\\nerror NetworkSupportedRegistry__NetworkNotExisted();\\n\\ncontract NetworkSupportedRegistry is INetworkSupportedRegistry, Ownable {\\n    mapping(bytes32 => bool) private supportedNetworks;\\n\\n    function isNetworkSupported(bytes32 networkHash) external view returns (bool) {\\n        return supportedNetworks[networkHash];\\n    }\\n\\n    function isNetworkSupported(string memory networkName) external view returns (bool) {\\n        return supportedNetworks[keccak256(abi.encode(networkName))];\\n\\n    }\\n\\n    function batchAddNetworks(string[] memory networkNames) external {\\n        for (uint256 idx = 0; idx < networkNames.length; idx++) {\\n            addNetwork(networkNames[idx]);\\n        }\\n    }\\n\\n    function batchAddNetworks(bytes32[] memory networkHashes) external {\\n        for (uint256 idx = 0; idx < networkHashes.length; idx++) {\\n            addNetwork(networkHashes[idx]);\\n        }\\n    }\\n\\n    function batchRevokeNetworks(string[] memory networkNames) external {\\n        for (uint256 idx = 0; idx < networkNames.length; idx++) {\\n            revokeNetwork(networkNames[idx]);\\n        }\\n    }\\n\\n    function batchRevokeNetworks(bytes32[] memory networkHashes) external {\\n        for (uint256 idx = 0; idx < networkHashes.length; idx++) {\\n            revokeNetwork(networkHashes[idx]);\\n        }\\n    }\\n\\n    function addNetwork(string memory networkName) public onlyOwner {\\n        bytes32 networkHash = keccak256(abi.encode(networkName));\\n        if (supportedNetworks[networkHash]) revert NetworkSupportedRegistry__NetworkAlreadyExisted();\\n        supportedNetworks[networkHash] = true;\\n        emit AddNetworkName(networkName, networkHash);\\n    }\\n\\n    function addNetwork(bytes32 networkHash) public onlyOwner {\\n        if (supportedNetworks[networkHash]) revert NetworkSupportedRegistry__NetworkAlreadyExisted();\\n        supportedNetworks[networkHash] = true;\\n        emit AddNetworkHash(networkHash);\\n    }\\n\\n    function revokeNetwork(string memory networkName) public onlyOwner {\\n        bytes32 networkHash = keccak256(abi.encode(networkName));\\n        if (!supportedNetworks[networkHash]) revert NetworkSupportedRegistry__NetworkNotExisted();\\n        supportedNetworks[networkHash] = false;\\n        emit RevokeNetworkName(networkName, networkHash);\\n    }\\n\\n    function revokeNetwork(bytes32 networkHash) public onlyOwner {\\n        if (!supportedNetworks[networkHash]) revert NetworkSupportedRegistry__NetworkNotExisted();\\n        supportedNetworks[networkHash] = false;\\n        emit RevokeNetworkHash(networkHash);\\n    }\\n}\\n\",\"keccak256\":\"0x771a9af4c5b9bdc3a5dc359b0d1cf8c4bd46a03e74f7054662f58d8f7ba2eb7e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c348061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063aca6ef0e11610066578063aca6ef0e146101a2578063c1886327146101b5578063c23b77f4146101c8578063f2fde38b146101db57600080fd5b80638da5cb5b1461015357806391ef73571461016c578063973cb0a11461017f57600080fd5b806317c6066f146100d45780633b2d3e37146100e9578063715018a6146100fc578063799d84a9146101045780637f24a93f146101175780638102511614610140575b600080fd5b6100e76100e236600461073c565b6101ee565b005b6100e76100f736600461086c565b6102a7565b6100e76102eb565b6100e761011236600461093e565b610321565b61012a61012536600461093e565b6103fa565b6040516101379190610983565b60405180910390f35b6100e761014e36600461086c565b610440565b6000546001600160a01b031660405161013791906109ab565b6100e761017a36600461093e565b610480565b61012a61018d36600461073c565b60009081526001602052604090205460ff1690565b6100e76101b0366004610a4b565b610553565b6100e76101c336600461073c565b610593565b6100e76101d6366004610a4b565b610632565b6100e76101e9366004610a9a565b610672565b6000546001600160a01b031633146102215760405162461bcd60e51b815260040161021890610abb565b60405180910390fd5b60008181526001602052604090205460ff161561025157604051637a965a7960e11b815260040160405180910390fd5b600081815260016020819052604091829020805460ff19169091179055517fb54ae657e47b43b811d1530a82eda711975e4f2559cb63d33c091b35c07996929061029c908390610afb565b60405180910390a150565b60005b81518110156102e7576102d58282815181106102c8576102c8610b09565b60200260200101516101ee565b806102df81610b35565b9150506102aa565b5050565b6000546001600160a01b031633146103155760405162461bcd60e51b815260040161021890610abb565b61031f60006106ce565b565b6000546001600160a01b0316331461034b5760405162461bcd60e51b815260040161021890610abb565b60008160405160200161035e9190610ba5565b60408051601f1981840301815291815281516020928301206000818152600190935291205490915060ff166103a65760405163c8ef12c760e01b815260040160405180910390fd5b60008181526001602052604090819020805460ff19169055517f20b511484bc9f89a9f8ef18096d0b62d2a2c00ba45bb59963d62245721dc3e34906103ee9084908490610bbd565b60405180910390a15050565b600060016000836040516020016104119190610ba5565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1692915050565b60005b81518110156102e75761046e82828151811061046157610461610b09565b6020026020010151610593565b8061047881610b35565b915050610443565b6000546001600160a01b031633146104aa5760405162461bcd60e51b815260040161021890610abb565b6000816040516020016104bd9190610ba5565b60408051601f1981840301815291815281516020928301206000818152600190935291205490915060ff161561050657604051637a965a7960e11b815260040160405180910390fd5b600081815260016020819052604091829020805460ff19169091179055517f643a185988d0d06cc85efb703c730f2c4494ddd8a60b3999e28513422fb39873906103ee9084908490610bbd565b60005b81518110156102e75761058182828151811061057457610574610b09565b6020026020010151610480565b8061058b81610b35565b915050610556565b6000546001600160a01b031633146105bd5760405162461bcd60e51b815260040161021890610abb565b60008181526001602052604090205460ff166105ec5760405163c8ef12c760e01b815260040160405180910390fd5b60008181526001602052604090819020805460ff19169055517f02defe9b4d25cbbb4fa9c0207bdf23ee2e1a588c309788817ea493e560198ed09061029c908390610afb565b60005b81518110156102e75761066082828151811061065357610653610b09565b6020026020010151610321565b8061066a81610b35565b915050610635565b6000546001600160a01b0316331461069c5760405162461bcd60e51b815260040161021890610abb565b6001600160a01b0381166106c25760405162461bcd60e51b815260040161021890610bdd565b6106cb816106ce565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805b81146106cb57600080fd5b80356107368161071e565b92915050565b60006020828403121561075157610751600080fd5b600061075d848461072b565b949350505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156107a1576107a1610765565b6040525050565b60006107b360405190565b90506107bf828261077b565b919050565b600067ffffffffffffffff8211156107de576107de610765565b5060209081020190565b60006107fb6107f6846107c4565b6107a8565b8381529050602080820190840283018581111561081a5761081a600080fd5b835b8181101561083e578061082f888261072b565b8452506020928301920161081c565b5050509392505050565b600082601f83011261085c5761085c600080fd5b813561075d8482602086016107e8565b60006020828403121561088157610881600080fd5b813567ffffffffffffffff81111561089b5761089b600080fd5b61075d84828501610848565b600067ffffffffffffffff8211156108c1576108c1610765565b601f19601f83011660200192915050565b82818337506000910152565b60006108ec6107f6846108a7565b90508281526020810184848401111561090757610907600080fd5b6109128482856108d2565b509392505050565b600082601f83011261092e5761092e600080fd5b813561075d8482602086016108de565b60006020828403121561095357610953600080fd5b813567ffffffffffffffff81111561096d5761096d600080fd5b61075d8482850161091a565b8015155b82525050565b602081016107368284610979565b60006001600160a01b038216610736565b61097d81610991565b6020810161073682846109a2565b60006109c76107f6846107c4565b838152905060208082019084028301858111156109e6576109e6600080fd5b835b8181101561083e57803567ffffffffffffffff811115610a0a57610a0a600080fd5b808601610a17898261091a565b85525050602092830192016109e8565b600082601f830112610a3b57610a3b600080fd5b813561075d8482602086016109b9565b600060208284031215610a6057610a60600080fd5b813567ffffffffffffffff811115610a7a57610a7a600080fd5b61075d84828501610a27565b61072081610991565b803561073681610a86565b600060208284031215610aaf57610aaf600080fd5b600061075d8484610a8f565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604083015260608201610736565b8061097d565b602081016107368284610af5565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198203610b4857610b48610b1f565b5060010190565b60005b83811015610b6a578181015183820152602001610b52565b50506000910152565b6000610b7d825190565b808452602084019350610b94818560208601610b4f565b601f01601f19169290920192915050565b60208082528101610bb68184610b73565b9392505050565b60408082528101610bce8185610b73565b9050610bb66020830184610af5565b6020808252810161073681602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b60408201526060019056fea164736f6c6343000814000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063aca6ef0e11610066578063aca6ef0e146101a2578063c1886327146101b5578063c23b77f4146101c8578063f2fde38b146101db57600080fd5b80638da5cb5b1461015357806391ef73571461016c578063973cb0a11461017f57600080fd5b806317c6066f146100d45780633b2d3e37146100e9578063715018a6146100fc578063799d84a9146101045780637f24a93f146101175780638102511614610140575b600080fd5b6100e76100e236600461073c565b6101ee565b005b6100e76100f736600461086c565b6102a7565b6100e76102eb565b6100e761011236600461093e565b610321565b61012a61012536600461093e565b6103fa565b6040516101379190610983565b60405180910390f35b6100e761014e36600461086c565b610440565b6000546001600160a01b031660405161013791906109ab565b6100e761017a36600461093e565b610480565b61012a61018d36600461073c565b60009081526001602052604090205460ff1690565b6100e76101b0366004610a4b565b610553565b6100e76101c336600461073c565b610593565b6100e76101d6366004610a4b565b610632565b6100e76101e9366004610a9a565b610672565b6000546001600160a01b031633146102215760405162461bcd60e51b815260040161021890610abb565b60405180910390fd5b60008181526001602052604090205460ff161561025157604051637a965a7960e11b815260040160405180910390fd5b600081815260016020819052604091829020805460ff19169091179055517fb54ae657e47b43b811d1530a82eda711975e4f2559cb63d33c091b35c07996929061029c908390610afb565b60405180910390a150565b60005b81518110156102e7576102d58282815181106102c8576102c8610b09565b60200260200101516101ee565b806102df81610b35565b9150506102aa565b5050565b6000546001600160a01b031633146103155760405162461bcd60e51b815260040161021890610abb565b61031f60006106ce565b565b6000546001600160a01b0316331461034b5760405162461bcd60e51b815260040161021890610abb565b60008160405160200161035e9190610ba5565b60408051601f1981840301815291815281516020928301206000818152600190935291205490915060ff166103a65760405163c8ef12c760e01b815260040160405180910390fd5b60008181526001602052604090819020805460ff19169055517f20b511484bc9f89a9f8ef18096d0b62d2a2c00ba45bb59963d62245721dc3e34906103ee9084908490610bbd565b60405180910390a15050565b600060016000836040516020016104119190610ba5565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1692915050565b60005b81518110156102e75761046e82828151811061046157610461610b09565b6020026020010151610593565b8061047881610b35565b915050610443565b6000546001600160a01b031633146104aa5760405162461bcd60e51b815260040161021890610abb565b6000816040516020016104bd9190610ba5565b60408051601f1981840301815291815281516020928301206000818152600190935291205490915060ff161561050657604051637a965a7960e11b815260040160405180910390fd5b600081815260016020819052604091829020805460ff19169091179055517f643a185988d0d06cc85efb703c730f2c4494ddd8a60b3999e28513422fb39873906103ee9084908490610bbd565b60005b81518110156102e75761058182828151811061057457610574610b09565b6020026020010151610480565b8061058b81610b35565b915050610556565b6000546001600160a01b031633146105bd5760405162461bcd60e51b815260040161021890610abb565b60008181526001602052604090205460ff166105ec5760405163c8ef12c760e01b815260040160405180910390fd5b60008181526001602052604090819020805460ff19169055517f02defe9b4d25cbbb4fa9c0207bdf23ee2e1a588c309788817ea493e560198ed09061029c908390610afb565b60005b81518110156102e75761066082828151811061065357610653610b09565b6020026020010151610321565b8061066a81610b35565b915050610635565b6000546001600160a01b0316331461069c5760405162461bcd60e51b815260040161021890610abb565b6001600160a01b0381166106c25760405162461bcd60e51b815260040161021890610bdd565b6106cb816106ce565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805b81146106cb57600080fd5b80356107368161071e565b92915050565b60006020828403121561075157610751600080fd5b600061075d848461072b565b949350505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156107a1576107a1610765565b6040525050565b60006107b360405190565b90506107bf828261077b565b919050565b600067ffffffffffffffff8211156107de576107de610765565b5060209081020190565b60006107fb6107f6846107c4565b6107a8565b8381529050602080820190840283018581111561081a5761081a600080fd5b835b8181101561083e578061082f888261072b565b8452506020928301920161081c565b5050509392505050565b600082601f83011261085c5761085c600080fd5b813561075d8482602086016107e8565b60006020828403121561088157610881600080fd5b813567ffffffffffffffff81111561089b5761089b600080fd5b61075d84828501610848565b600067ffffffffffffffff8211156108c1576108c1610765565b601f19601f83011660200192915050565b82818337506000910152565b60006108ec6107f6846108a7565b90508281526020810184848401111561090757610907600080fd5b6109128482856108d2565b509392505050565b600082601f83011261092e5761092e600080fd5b813561075d8482602086016108de565b60006020828403121561095357610953600080fd5b813567ffffffffffffffff81111561096d5761096d600080fd5b61075d8482850161091a565b8015155b82525050565b602081016107368284610979565b60006001600160a01b038216610736565b61097d81610991565b6020810161073682846109a2565b60006109c76107f6846107c4565b838152905060208082019084028301858111156109e6576109e6600080fd5b835b8181101561083e57803567ffffffffffffffff811115610a0a57610a0a600080fd5b808601610a17898261091a565b85525050602092830192016109e8565b600082601f830112610a3b57610a3b600080fd5b813561075d8482602086016109b9565b600060208284031215610a6057610a60600080fd5b813567ffffffffffffffff811115610a7a57610a7a600080fd5b61075d84828501610a27565b61072081610991565b803561073681610a86565b600060208284031215610aaf57610aaf600080fd5b600061075d8484610a8f565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604083015260608201610736565b8061097d565b602081016107368284610af5565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198203610b4857610b48610b1f565b5060010190565b60005b83811015610b6a578181015183820152602001610b52565b50506000910152565b6000610b7d825190565b808452602084019350610b94818560208601610b4f565b601f01601f19169290920192915050565b60208082528101610bb68184610b73565b9392505050565b60408082528101610bce8185610b73565b9050610bb66020830184610af5565b6020808252810161073681602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b60408201526060019056fea164736f6c6343000814000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/oracle/NetworkSupportedRegistry.sol:NetworkSupportedRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 184,
        "contract": "contracts/oracle/NetworkSupportedRegistry.sol:NetworkSupportedRegistry",
        "label": "supportedNetworks",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}