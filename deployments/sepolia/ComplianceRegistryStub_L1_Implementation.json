{
  "address": "0x8B3D5BB85fe056224581B102e6bf4202Bd665032",
  "abi": [
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ComplianceRegistryStub_L1__InvalidConfirmProposalStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ComplianceRegistryStub_L1__OnlyAllowScripting",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ComplianceRegistryStub_L1__RegistryIndexNotCreated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ComplianceRegistryStub_L1__RegistryNotCreated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_MODE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_NODE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pivot",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useWhitelist",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "callback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "bytes[]",
              "name": "targets",
              "type": "bytes[]"
            },
            {
              "internalType": "bool",
              "name": "isWhitelist",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "region",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum ProposalCommon.ProposalStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "voters",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "activeNodes",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProposalCommon.Proposal",
          "name": "proposal",
          "type": "tuple"
        }
      ],
      "name": "confirmProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "decodeAddressBytes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registryIndexFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registryFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBlacklist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registryFactory",
      "outputs": [
        {
          "internalType": "contract IRegistryFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registryIndexFactory",
      "outputs": [
        {
          "internalType": "contract IRegistryIndexFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x049e7cf266f20eeae99d73f46f51c26586811d4ee34954623965a82ccbec532a",
  "receipt": {
    "to": null,
    "from": "0xdfcb98d66336084326Bf69a0e55Ed15c2Ae24008",
    "contractAddress": "0x8B3D5BB85fe056224581B102e6bf4202Bd665032",
    "transactionIndex": 33,
    "gasUsed": "1235954",
    "logsBloom": "0x
    "blockHash": "0x163c0856e8bd538e55908ffd7e5bb7dce19fdf3d56f5c6d92e4d2d4bb01c518d",
    "transactionHash": "0x049e7cf266f20eeae99d73f46f51c26586811d4ee34954623965a82ccbec532a",
    "logs": [],
    "blockNumber": 5743190,
    "cumulativeGasUsed": "4193751",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d98c96d6312c30edde16156812177cfe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ComplianceRegistryStub_L1__InvalidConfirmProposalStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ComplianceRegistryStub_L1__OnlyAllowScripting\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ComplianceRegistryStub_L1__RegistryIndexNotCreated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ComplianceRegistryStub_L1__RegistryNotCreated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_MODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pivot\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useWhitelist\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"callback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"targets\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"isWhitelist\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum ProposalCommon.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"voters\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeNodes\",\"type\":\"uint256\"}],\"internalType\":\"struct ProposalCommon.Proposal\",\"name\":\"proposal\",\"type\":\"tuple\"}],\"name\":\"confirmProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeAddressBytes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registryIndexFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registryFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryFactory\",\"outputs\":[{\"internalType\":\"contract IRegistryFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryIndexFactory\",\"outputs\":[{\"internalType\":\"contract IRegistryIndexFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/ComplianceRegistryStub_L1.sol\":\"ComplianceRegistryStub_L1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/libraries/ProposalCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary ProposalCommon {\\n    enum ProposalStatus {\\n        Unknown,\\n        Pending,\\n        Approved,\\n        Rejected\\n    }\\n\\n    struct Proposal {\\n        bytes32 id;\\n        address author;\\n        bytes[] targets;\\n        bool isWhitelist;\\n        string region;\\n        uint256 timestamp;\\n        ProposalStatus status;\\n        bytes signature;\\n        uint256 voters;\\n        uint256 activeNodes;\\n    }\\n}\\n\",\"keccak256\":\"0x94bcf8bad096852ab6afc2ccabc00ff3a8c8efbe15d019235620f097930e78d1\",\"license\":\"UNLICENSED\"},\"contracts/oracle/ComplianceRegistryStub_L1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {ProposalCommon} from \\\"../libraries/ProposalCommon.sol\\\";\\n\\nerror ComplianceRegistryStub_L1__InvalidConfirmProposalStatus();\\nerror ComplianceRegistryStub_L1__OnlyAllowScripting();\\nerror ComplianceRegistryStub_L1__RegistryIndexNotCreated(\\n    address,\\n    uint256,\\n    address\\n);\\nerror ComplianceRegistryStub_L1__RegistryNotCreated(\\n    address,\\n    uint256,\\n    address,\\n    bool,\\n    address\\n);\\n\\ninterface IComplianceRegistry {\\n    function store(address account) external;\\n}\\n\\ninterface IComplianceRegistryIndex {\\n\\n    function store(address account, bool useWhitelist) external;\\n\\n    function get(\\n        address account,\\n        bool useWhitelist\\n    ) external view returns (bool);\\n}\\n\\ninterface IRegistryFactory {\\n    function deploy(\\n        uint256 pivot,\\n        address index,\\n        address stub,\\n        bool useWhitelist\\n    ) external returns (address);\\n\\n    function get(\\n        uint256 pivot,\\n        address index,\\n        bool useWhitelist\\n    ) external view returns (address, bool);\\n}\\n\\ninterface IRegistryIndexFactory {\\n    function deploy(uint256 pivot, address stub) external returns (address);\\n\\n    function get(uint256 pivot) external view returns (address, bool);\\n}\\n\\ncontract ComplianceRegistryStub_L1 is AccessControlUpgradeable {\\n    bytes32 public constant ADMIN_ROLE =\\n        keccak256(\\\"compliance-registry-stub-l1.admin.role\\\");\\n    bytes32 public constant MANAGER_ROLE =\\n        keccak256(\\\"compliance-registry-stub-1.manager.role\\\");\\n    bytes32 public constant GUARDIAN_NODE =\\n        keccak256(\\\"compliance-registry-stub-l1.guardian.role\\\");\\n    uint256 public constant BASE_MODE = 100;\\n\\n    IRegistryFactory public registryFactory;\\n    IRegistryIndexFactory public registryIndexFactory;\\n    address private scripting;\\n\\n    function initialize(\\n        address _admin,\\n        address _registryIndexFactory,\\n        address _registryFactory\\n    ) public initializer {\\n        _grantRole(ADMIN_ROLE, _admin);\\n        _grantRole(GUARDIAN_NODE, _admin);\\n        _setRoleAdmin(GUARDIAN_NODE, ADMIN_ROLE);\\n\\n        registryIndexFactory = IRegistryIndexFactory(_registryIndexFactory);\\n        registryFactory = IRegistryFactory(_registryFactory);\\n        require(hasRole(ADMIN_ROLE, _admin));\\n    }\\n\\n    function decodeAddressBytes(\\n        bytes memory data\\n    ) public pure returns (address) {\\n        bytes memory addressBytes = abi.decode(data, (bytes));\\n        return abi.decode(addressBytes, (address));\\n    }\\n\\n    function confirmProposal(\\n        ProposalCommon.Proposal memory proposal\\n    ) external onlyRole(GUARDIAN_NODE) {\\n        if (proposal.status != ProposalCommon.ProposalStatus.Approved)\\n            revert ComplianceRegistryStub_L1__InvalidConfirmProposalStatus();\\n        for (uint256 idx = 0; idx < proposal.targets.length; idx++) {\\n            address target = decodeAddressBytes(proposal.targets[idx]);\\n            uint256 pivot = uint160(target) % BASE_MODE;\\n            (address registryIndex, bool notCreated) = registryIndexFactory.get(\\n                pivot\\n            );\\n            if (notCreated)\\n                revert ComplianceRegistryStub_L1__RegistryIndexNotCreated(\\n                    address(registryIndexFactory),\\n                    pivot,\\n                    registryIndex\\n                );\\n            scripting = registryIndex;\\n            IComplianceRegistryIndex(registryIndex).store(\\n                target,\\n                proposal.isWhitelist\\n            );\\n        }\\n    }\\n\\n    function callback(\\n        uint256 pivot,\\n        address caller,\\n        bool useWhitelist,\\n        address account\\n    ) external {\\n        if (scripting != caller)\\n            revert ComplianceRegistryStub_L1__OnlyAllowScripting();\\n        (address registry, bool notCreated) = registryFactory.get(\\n            pivot,\\n            caller,\\n            useWhitelist\\n        );\\n        if (notCreated)\\n            revert ComplianceRegistryStub_L1__RegistryNotCreated(\\n                address(registryFactory),\\n                pivot,\\n                caller,\\n                useWhitelist,\\n                registry\\n            );\\n        IComplianceRegistry(registry).store(account);\\n    }\\n\\n    function isWhitelist(address account) external view returns (bool) {\\n        uint256 pivot = uint160(account) % BASE_MODE;\\n        (address registryIndex, bool notCreated) = registryIndexFactory.get(\\n            pivot\\n        );\\n        if (!notCreated) {\\n            return\\n                IComplianceRegistryIndex(registryIndex).get(\\n                    account,\\n                    true\\n                );\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function isBlacklist(address account) external view returns (bool) {\\n        uint256 pivot = uint160(account) % BASE_MODE;\\n        (address registryIndex, bool notCreated) = registryIndexFactory.get(\\n            pivot\\n        );\\n        if (!notCreated) {\\n            return\\n                IComplianceRegistryIndex(registryIndex).get(\\n                    account,\\n                    false\\n                );\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x565cc131413f8e077d554bf81cf0951e3cf56ff58ab84260daea028f78836a1c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611565806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806391d14854116100ad578063c0c53b8b11610071578063c0c53b8b1461025d578063c683630d14610270578063d547741f14610283578063ec87621c14610296578063f86c5f89146102bd57600080fd5b806391d14854146101fc5780639af0861d1461020f578063a217fddf1461022f578063a6408bcd14610237578063b0385f961461024a57600080fd5b80632f2ff15d116100f45780632f2ff15d14610197578063333e99db146101ac57806336568abe146101bf578063571c81e2146101d257806375b238fc146101e757600080fd5b806301ffc9a71461012657806302d3c98e1461014f578063101d896314610164578063248a9ca314610184575b600080fd5b610139610134366004610ca1565b6102d0565b6040516101469190610cd4565b60405180910390f35b610157606481565b6040516101469190610ce8565b610177610172366004610def565b610307565b6040516101469190610e43565b610157610192366004610e62565b61033b565b6101aa6101a5366004610e97565b61035d565b005b6101396101ba366004610ed4565b61037f565b6101aa6101cd366004610e97565b610499565b61015760008051602061151983398151915281565b6101576000805160206114f983398151915281565b61013961020a366004610e97565b6104d1565b600154610222906001600160a01b031681565b6040516101469190610f14565b610157600081565b6101aa610245366004610f35565b610509565b6101aa6102583660046111ad565b610653565b6101aa61026b3660046111e7565b610829565b61013961027e366004610ed4565b6109de565b6101aa610291366004610e97565b610aa3565b6101577f4106b53b00ba007ca00c66fda2dd068c64fae6d9aeb99cddc4de3de6cbfa225981565b600054610222906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061030157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000808280602001905181019061031e91906112b3565b90508080602001905181019061033491906112f8565b9392505050565b6000908152600080516020611539833981519152602052604090206001015490565b6103668261033b565b61036f81610abf565b6103798383610acc565b50505050565b60008061039660646001600160a01b03851661132f565b600154604051634a83e9cd60e11b815291925060009182916001600160a01b031690639507d39a906103cc908690600401610ce8565b6040805180830381865afa1580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c919061134e565b915091508061048e5760405163bce32fa560e01b81526001600160a01b0383169063bce32fa590610444908890600090600401611381565b602060405180830381865afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610485919061139c565b95945050505050565b506000949350505050565b6001600160a01b03811633146104c25760405163334bd91960e11b815260040160405180910390fd5b6104cc8282610b71565b505050565b6000918252600080516020611539833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6002546001600160a01b038481169116146105375760405163452f2ad160e01b815260040160405180910390fd5b6000805460405163310090cf60e01b815282916001600160a01b03169063310090cf9061056c908990899089906004016113bd565b6040805180830381865afa158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac919061134e565b9150915080156105ed5760005460405163d213a54d60e01b81526105e4916001600160a01b03169088908890889087906004016113e5565b60405180910390fd5b604051639e39db7360e01b81526001600160a01b03831690639e39db7390610619908690600401610e43565b600060405180830381600087803b15801561063357600080fd5b505af1158015610647573d6000803e3d6000fd5b50505050505050505050565b60008051602061151983398151915261066b81610abf565b60028260c00151600381111561068357610683611431565b146106a15760405163236ca85f60e11b815260040160405180910390fd5b60005b8260400151518110156104cc5760006106d9846040015183815181106106cc576106cc611447565b6020026020010151610307565b905060006106f160646001600160a01b03841661132f565b600154604051634a83e9cd60e11b815291925060009182916001600160a01b031690639507d39a90610727908690600401610ce8565b6040805180830381865afa158015610743573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610767919061134e565b91509150801561079b576001546040516339282b9160e11b81526105e4916001600160a01b0316908590859060040161145d565b600280546001600160a01b0319166001600160a01b0384169081179091556060880151604051634a80e27360e01b8152634a80e273916107e091889190600401611381565b600060405180830381600087803b1580156107fa57600080fd5b505af115801561080e573d6000803e3d6000fd5b505050505050505080806108219061149b565b9150506106a4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b031660008115801561086e5750825b90506000826001600160401b0316600114801561088a5750303b155b905081158015610898575080155b156108b65760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156108e057845460ff60401b1916600160401b1785555b6108f86000805160206114f983398151915289610acc565b5061091160008051602061151983398151915289610acc565b506109386000805160206115198339815191526000805160206114f9833981519152610bed565b600180546001600160a01b03808a166001600160a01b03199283161790925560008054928916929091169190911790556109806000805160206114f9833981519152896104d1565b61098957600080fd5b83156109d457845460ff60401b191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906109cb906001906114cf565b60405180910390a15b5050505050505050565b6000806109f560646001600160a01b03851661132f565b600154604051634a83e9cd60e11b815291925060009182916001600160a01b031690639507d39a90610a2b908690600401610ce8565b6040805180830381865afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b919061134e565b915091508061048e5760405163bce32fa560e01b81526001600160a01b0383169063bce32fa590610444908890600190600401611381565b610aac8261033b565b610ab581610abf565b6103798383610b71565b610ac98133610c50565b50565b6000600080516020611539833981519152610ae784846104d1565b610b67576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055610b1d3390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610301565b6000915050610301565b6000600080516020611539833981519152610b8c84846104d1565b15610b67576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610301565b6000805160206115398339815191526000610c078461033b565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b610c5a82826104d1565b610c7b57808260405163e2517d3f60e01b81526004016105e49291906114dd565b5050565b6001600160e01b031981165b8114610ac957600080fd5b803561030181610c7f565b600060208284031215610cb657610cb6600080fd5b6000610cc28484610c96565b949350505050565b8015155b82525050565b602081016103018284610cca565b80610cce565b602081016103018284610ce2565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715610d3157610d31610cf6565b6040525050565b6000610d4360405190565b9050610d4f8282610d0c565b919050565b60006001600160401b03821115610d6d57610d6d610cf6565b601f19601f83011660200192915050565b82818337506000910152565b6000610d9d610d9884610d54565b610d38565b905082815260208101848484011115610db857610db8600080fd5b610dc3848285610d7e565b509392505050565b600082601f830112610ddf57610ddf600080fd5b8135610cc2848260208601610d8a565b600060208284031215610e0457610e04600080fd5b81356001600160401b03811115610e1d57610e1d600080fd5b610cc284828501610dcb565b60006001600160a01b038216610301565b610cce81610e29565b602081016103018284610e3a565b80610c8b565b803561030181610e51565b600060208284031215610e7757610e77600080fd5b6000610cc28484610e57565b610c8b81610e29565b803561030181610e83565b60008060408385031215610ead57610ead600080fd5b6000610eb98585610e57565b9250506020610eca85828601610e8c565b9150509250929050565b600060208284031215610ee957610ee9600080fd5b6000610cc28484610e8c565b600061030182610e29565b600061030182610ef5565b610cce81610f00565b602081016103018284610f0b565b801515610c8b565b803561030181610f22565b60008060008060808587031215610f4e57610f4e600080fd5b6000610f5a8787610e57565b9450506020610f6b87828801610e8c565b9350506040610f7c87828801610f2a565b9250506060610f8d87828801610e8c565b91505092959194509250565b60006001600160401b03821115610fb257610fb2610cf6565b5060209081020190565b6000610fca610d9884610f99565b83815290506020808201908402830185811115610fe957610fe9600080fd5b835b818110156110295780356001600160401b0381111561100c5761100c600080fd5b8086016110198982610dcb565b8552505060209283019201610feb565b5050509392505050565b600082601f83011261104757611047600080fd5b8135610cc2848260208601610fbc565b60048110610ac957600080fd5b803561030181611057565b6000610140828403121561108557611085600080fd5b611090610140610d38565b9050600061109e8484610e57565b82525060206110af84848301610e8c565b60208301525060408201356001600160401b038111156110d1576110d1600080fd5b6110dd84828501611033565b60408301525060606110f184828501610f2a565b60608301525060808201356001600160401b0381111561111357611113600080fd5b61111f84828501610dcb565b60808301525060a061113384828501610e57565b60a08301525060c061114784828501611064565b60c08301525060e08201356001600160401b0381111561116957611169600080fd5b61117584828501610dcb565b60e08301525061010061118a84828501610e57565b610100830152506101206111a084828501610e57565b6101208301525092915050565b6000602082840312156111c2576111c2600080fd5b81356001600160401b038111156111db576111db600080fd5b610cc28482850161106f565b6000806000606084860312156111ff576111ff600080fd5b600061120b8686610e8c565b935050602061121c86828701610e8c565b925050604061122d86828701610e8c565b9150509250925092565b60005b8381101561125257818101518382015260200161123a565b50506000910152565b6000611269610d9884610d54565b90508281526020810184848401111561128457611284600080fd5b610dc3848285611237565b600082601f8301126112a3576112a3600080fd5b8151610cc284826020860161125b565b6000602082840312156112c8576112c8600080fd5b81516001600160401b038111156112e1576112e1600080fd5b610cc28482850161128f565b805161030181610e83565b60006020828403121561130d5761130d600080fd5b6000610cc284846112ed565b634e487b7160e01b600052601260045260246000fd5b60008261133e5761133e611319565b500690565b805161030181610f22565b6000806040838503121561136457611364600080fd5b600061137085856112ed565b9250506020610eca85828601611343565b6040810161138f8285610e3a565b6103346020830184610cca565b6000602082840312156113b1576113b1600080fd5b6000610cc28484611343565b606081016113cb8286610ce2565b6113d86020830185610e3a565b610cc26040830184610cca565b60a081016113f38288610e3a565b6114006020830187610ce2565b61140d6040830186610e3a565b61141a6060830185610cca565b6114276080830184610e3a565b9695505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6060810161146b8286610e3a565b6114786020830185610ce2565b610cc26040830184610e3a565b634e487b7160e01b600052601160045260246000fd5b600060001982036114ae576114ae611485565b5060010190565b60006001600160401b038216610301565b610cce816114b5565b6020810161030182846114c6565b604081016114eb8285610e3a565b6103346020830184610ce256fe934c13b4b46cd019a01bb75d649e569483f77416ae3a2eb616d44dd406e67ed4e76d95910c74dbdb8a76b5bb9fe1033fb4a288062f27b597996af2ee14b645dd02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a164736f6c6343000814000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806391d14854116100ad578063c0c53b8b11610071578063c0c53b8b1461025d578063c683630d14610270578063d547741f14610283578063ec87621c14610296578063f86c5f89146102bd57600080fd5b806391d14854146101fc5780639af0861d1461020f578063a217fddf1461022f578063a6408bcd14610237578063b0385f961461024a57600080fd5b80632f2ff15d116100f45780632f2ff15d14610197578063333e99db146101ac57806336568abe146101bf578063571c81e2146101d257806375b238fc146101e757600080fd5b806301ffc9a71461012657806302d3c98e1461014f578063101d896314610164578063248a9ca314610184575b600080fd5b610139610134366004610ca1565b6102d0565b6040516101469190610cd4565b60405180910390f35b610157606481565b6040516101469190610ce8565b610177610172366004610def565b610307565b6040516101469190610e43565b610157610192366004610e62565b61033b565b6101aa6101a5366004610e97565b61035d565b005b6101396101ba366004610ed4565b61037f565b6101aa6101cd366004610e97565b610499565b61015760008051602061151983398151915281565b6101576000805160206114f983398151915281565b61013961020a366004610e97565b6104d1565b600154610222906001600160a01b031681565b6040516101469190610f14565b610157600081565b6101aa610245366004610f35565b610509565b6101aa6102583660046111ad565b610653565b6101aa61026b3660046111e7565b610829565b61013961027e366004610ed4565b6109de565b6101aa610291366004610e97565b610aa3565b6101577f4106b53b00ba007ca00c66fda2dd068c64fae6d9aeb99cddc4de3de6cbfa225981565b600054610222906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061030157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000808280602001905181019061031e91906112b3565b90508080602001905181019061033491906112f8565b9392505050565b6000908152600080516020611539833981519152602052604090206001015490565b6103668261033b565b61036f81610abf565b6103798383610acc565b50505050565b60008061039660646001600160a01b03851661132f565b600154604051634a83e9cd60e11b815291925060009182916001600160a01b031690639507d39a906103cc908690600401610ce8565b6040805180830381865afa1580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c919061134e565b915091508061048e5760405163bce32fa560e01b81526001600160a01b0383169063bce32fa590610444908890600090600401611381565b602060405180830381865afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610485919061139c565b95945050505050565b506000949350505050565b6001600160a01b03811633146104c25760405163334bd91960e11b815260040160405180910390fd5b6104cc8282610b71565b505050565b6000918252600080516020611539833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6002546001600160a01b038481169116146105375760405163452f2ad160e01b815260040160405180910390fd5b6000805460405163310090cf60e01b815282916001600160a01b03169063310090cf9061056c908990899089906004016113bd565b6040805180830381865afa158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac919061134e565b9150915080156105ed5760005460405163d213a54d60e01b81526105e4916001600160a01b03169088908890889087906004016113e5565b60405180910390fd5b604051639e39db7360e01b81526001600160a01b03831690639e39db7390610619908690600401610e43565b600060405180830381600087803b15801561063357600080fd5b505af1158015610647573d6000803e3d6000fd5b50505050505050505050565b60008051602061151983398151915261066b81610abf565b60028260c00151600381111561068357610683611431565b146106a15760405163236ca85f60e11b815260040160405180910390fd5b60005b8260400151518110156104cc5760006106d9846040015183815181106106cc576106cc611447565b6020026020010151610307565b905060006106f160646001600160a01b03841661132f565b600154604051634a83e9cd60e11b815291925060009182916001600160a01b031690639507d39a90610727908690600401610ce8565b6040805180830381865afa158015610743573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610767919061134e565b91509150801561079b576001546040516339282b9160e11b81526105e4916001600160a01b0316908590859060040161145d565b600280546001600160a01b0319166001600160a01b0384169081179091556060880151604051634a80e27360e01b8152634a80e273916107e091889190600401611381565b600060405180830381600087803b1580156107fa57600080fd5b505af115801561080e573d6000803e3d6000fd5b505050505050505080806108219061149b565b9150506106a4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b031660008115801561086e5750825b90506000826001600160401b0316600114801561088a5750303b155b905081158015610898575080155b156108b65760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156108e057845460ff60401b1916600160401b1785555b6108f86000805160206114f983398151915289610acc565b5061091160008051602061151983398151915289610acc565b506109386000805160206115198339815191526000805160206114f9833981519152610bed565b600180546001600160a01b03808a166001600160a01b03199283161790925560008054928916929091169190911790556109806000805160206114f9833981519152896104d1565b61098957600080fd5b83156109d457845460ff60401b191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906109cb906001906114cf565b60405180910390a15b5050505050505050565b6000806109f560646001600160a01b03851661132f565b600154604051634a83e9cd60e11b815291925060009182916001600160a01b031690639507d39a90610a2b908690600401610ce8565b6040805180830381865afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b919061134e565b915091508061048e5760405163bce32fa560e01b81526001600160a01b0383169063bce32fa590610444908890600190600401611381565b610aac8261033b565b610ab581610abf565b6103798383610b71565b610ac98133610c50565b50565b6000600080516020611539833981519152610ae784846104d1565b610b67576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055610b1d3390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610301565b6000915050610301565b6000600080516020611539833981519152610b8c84846104d1565b15610b67576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610301565b6000805160206115398339815191526000610c078461033b565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b610c5a82826104d1565b610c7b57808260405163e2517d3f60e01b81526004016105e49291906114dd565b5050565b6001600160e01b031981165b8114610ac957600080fd5b803561030181610c7f565b600060208284031215610cb657610cb6600080fd5b6000610cc28484610c96565b949350505050565b8015155b82525050565b602081016103018284610cca565b80610cce565b602081016103018284610ce2565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715610d3157610d31610cf6565b6040525050565b6000610d4360405190565b9050610d4f8282610d0c565b919050565b60006001600160401b03821115610d6d57610d6d610cf6565b601f19601f83011660200192915050565b82818337506000910152565b6000610d9d610d9884610d54565b610d38565b905082815260208101848484011115610db857610db8600080fd5b610dc3848285610d7e565b509392505050565b600082601f830112610ddf57610ddf600080fd5b8135610cc2848260208601610d8a565b600060208284031215610e0457610e04600080fd5b81356001600160401b03811115610e1d57610e1d600080fd5b610cc284828501610dcb565b60006001600160a01b038216610301565b610cce81610e29565b602081016103018284610e3a565b80610c8b565b803561030181610e51565b600060208284031215610e7757610e77600080fd5b6000610cc28484610e57565b610c8b81610e29565b803561030181610e83565b60008060408385031215610ead57610ead600080fd5b6000610eb98585610e57565b9250506020610eca85828601610e8c565b9150509250929050565b600060208284031215610ee957610ee9600080fd5b6000610cc28484610e8c565b600061030182610e29565b600061030182610ef5565b610cce81610f00565b602081016103018284610f0b565b801515610c8b565b803561030181610f22565b60008060008060808587031215610f4e57610f4e600080fd5b6000610f5a8787610e57565b9450506020610f6b87828801610e8c565b9350506040610f7c87828801610f2a565b9250506060610f8d87828801610e8c565b91505092959194509250565b60006001600160401b03821115610fb257610fb2610cf6565b5060209081020190565b6000610fca610d9884610f99565b83815290506020808201908402830185811115610fe957610fe9600080fd5b835b818110156110295780356001600160401b0381111561100c5761100c600080fd5b8086016110198982610dcb565b8552505060209283019201610feb565b5050509392505050565b600082601f83011261104757611047600080fd5b8135610cc2848260208601610fbc565b60048110610ac957600080fd5b803561030181611057565b6000610140828403121561108557611085600080fd5b611090610140610d38565b9050600061109e8484610e57565b82525060206110af84848301610e8c565b60208301525060408201356001600160401b038111156110d1576110d1600080fd5b6110dd84828501611033565b60408301525060606110f184828501610f2a565b60608301525060808201356001600160401b0381111561111357611113600080fd5b61111f84828501610dcb565b60808301525060a061113384828501610e57565b60a08301525060c061114784828501611064565b60c08301525060e08201356001600160401b0381111561116957611169600080fd5b61117584828501610dcb565b60e08301525061010061118a84828501610e57565b610100830152506101206111a084828501610e57565b6101208301525092915050565b6000602082840312156111c2576111c2600080fd5b81356001600160401b038111156111db576111db600080fd5b610cc28482850161106f565b6000806000606084860312156111ff576111ff600080fd5b600061120b8686610e8c565b935050602061121c86828701610e8c565b925050604061122d86828701610e8c565b9150509250925092565b60005b8381101561125257818101518382015260200161123a565b50506000910152565b6000611269610d9884610d54565b90508281526020810184848401111561128457611284600080fd5b610dc3848285611237565b600082601f8301126112a3576112a3600080fd5b8151610cc284826020860161125b565b6000602082840312156112c8576112c8600080fd5b81516001600160401b038111156112e1576112e1600080fd5b610cc28482850161128f565b805161030181610e83565b60006020828403121561130d5761130d600080fd5b6000610cc284846112ed565b634e487b7160e01b600052601260045260246000fd5b60008261133e5761133e611319565b500690565b805161030181610f22565b6000806040838503121561136457611364600080fd5b600061137085856112ed565b9250506020610eca85828601611343565b6040810161138f8285610e3a565b6103346020830184610cca565b6000602082840312156113b1576113b1600080fd5b6000610cc28484611343565b606081016113cb8286610ce2565b6113d86020830185610e3a565b610cc26040830184610cca565b60a081016113f38288610e3a565b6114006020830187610ce2565b61140d6040830186610e3a565b61141a6060830185610cca565b6114276080830184610e3a565b9695505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6060810161146b8286610e3a565b6114786020830185610ce2565b610cc26040830184610e3a565b634e487b7160e01b600052601160045260246000fd5b600060001982036114ae576114ae611485565b5060010190565b60006001600160401b038216610301565b610cce816114b5565b6020810161030182846114c6565b604081016114eb8285610e3a565b6103346020830184610ce256fe934c13b4b46cd019a01bb75d649e569483f77416ae3a2eb616d44dd406e67ed4e76d95910c74dbdb8a76b5bb9fe1033fb4a288062f27b597996af2ee14b645dd02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a164736f6c6343000814000a",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8933,
        "contract": "contracts/oracle/ComplianceRegistryStub_L1.sol:ComplianceRegistryStub_L1",
        "label": "registryFactory",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRegistryFactory)8891"
      },
      {
        "astId": 8936,
        "contract": "contracts/oracle/ComplianceRegistryStub_L1.sol:ComplianceRegistryStub_L1",
        "label": "registryIndexFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRegistryIndexFactory)8910"
      },
      {
        "astId": 8938,
        "contract": "contracts/oracle/ComplianceRegistryStub_L1.sol:ComplianceRegistryStub_L1",
        "label": "scripting",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IRegistryFactory)8891": {
        "encoding": "inplace",
        "label": "contract IRegistryFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IRegistryIndexFactory)8910": {
        "encoding": "inplace",
        "label": "contract IRegistryIndexFactory",
        "numberOfBytes": "20"
      }
    }
  }
}