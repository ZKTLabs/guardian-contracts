{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/guard/GuardianNode.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {IGuardianNode} from \"../interfaces/IGuardianNode.sol\";\n\ncontract GuardianNode is IGuardianNode, AccessControl {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\"GUARDIAN_ROLE\");\n\n    Slot0 public slot0;\n\n    constructor() {\n        _setupRole(ADMIN_ROLE, _msgSender());\n        _setRoleAdmin(GUARDIAN_ROLE, ADMIN_ROLE);\n        slot0 = Slot0({activeNodes: 0});\n    }\n\n    function syncActiveNodes(\n        uint256 _activeNodes\n    ) external onlyRole(GUARDIAN_ROLE) {\n        slot0.activeNodes = _activeNodes;\n    }\n\n    function activeNodes() external view override returns (uint256) {\n        return slot0.activeNodes;\n    }\n\n    function voteParticipated(address addr) external view returns (uint256) {\n        return 0;\n    }\n\n    function consecutiveOnlineSession(\n        address addr\n    ) external view returns (uint256) {\n        return 0;\n    }\n\n    function zktEarned(address addr) external view returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/interfaces/IComplianceRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\ninterface IComplianceEvent {\n    event AddProposalToAnotherNetworkList(\n        bool isWhitelistRegistry,\n        bytes data,\n        bytes32 networkHash\n    );\n}\n\ninterface IComplianceEntry {\n    struct Compliance {\n        bytes32 proposalId;\n        address target;\n        address author;\n        string description;\n        bool isInList;\n    }\n}\n\ninterface IComplianceRegistry is IComplianceEntry, IComplianceEvent {\n    function addProposalToList(\n        ProposalCommon.Proposal memory proposal\n    ) external;\n\n    function checkAddress(address account) external view returns (bool);\n\n    function isWhitelistRegistry() external view returns (bool);\n\n    function decodeBytes(\n        bytes memory data\n    ) external view returns (address, bytes32);\n}\n"
    },
    "contracts/interfaces/IComplianceRegistryStub.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\ninterface IComplianceRegistryStubEvent {\n    event AddToBlacklist(bytes32);\n\n    event AddToWhitelist(bytes32);\n}\n\ninterface IComplianceRegistryStub is IComplianceRegistryStubEvent {\n    function confirmProposal(ProposalCommon.Proposal memory proposal) external;\n\n    function isWhitelist(address account) external view returns (bool);\n\n    function isBlacklist(address account) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IGuardianNode.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface ISentryGuardianNodeSlot {\n    struct Slot0 {\n        uint256 activeNodes;\n    }\n}\n\ninterface IGuardianNode is ISentryGuardianNodeSlot {\n    function activeNodes() external view returns (uint256);\n    function voteParticipated(address addr) external view returns (uint256);\n    function consecutiveOnlineSession(\n        address addr\n    ) external view returns (uint256);\n    function zktEarned(address addr) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/INetworkSupportedRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface INetworkSupportedRegistryEvent {\n    event AddNetworkHash(bytes32 networkHash);\n\n    event AddNetworkName(string, bytes32);\n\n    event RevokeNetworkHash(bytes32 networkHash);\n\n    event RevokeNetworkName(string, bytes32);\n}\n\ninterface INetworkSupportedRegistry is INetworkSupportedRegistryEvent {\n    function isNetworkSupported(\n        bytes32 networkHash\n    ) external view returns (bool);\n\n    function isNetworkSupported(\n        string memory networkName\n    ) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IProposalManagement.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface IProposalManagementEvent {\n    event ConfirmProposal(bytes32 proposalId);\n    event RejectProposal(bytes32 proposalId);\n}\n\ninterface IProposalManagement is IProposalManagementEvent {\n    function createProposal(\n        bytes32 proposalId,\n        bytes[] calldata targetAddresses,\n        bool isWhitelist,\n        string calldata description,\n        bytes calldata signature\n    ) external;\n\n    function voteAndConfirmProposals(bytes32[] calldata proposalIds) external;\n\n    function rejectExpiredProposals(\n        bytes32[] calldata expiredProposalIds\n    ) external;\n}\n"
    },
    "contracts/libraries/ProposalCommon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nlibrary ProposalCommon {\n    enum ProposalStatus {\n        Unknown,\n        Pending,\n        Approved,\n        Rejected\n    }\n\n    struct Proposal {\n        bytes32 id;\n        address author;\n        bytes[] targets;\n        bool isWhitelist;\n        string description;\n        uint256 timestamp;\n        ProposalStatus status;\n        bytes signature;\n        uint256 voters;\n        uint256 activeNodes;\n    }\n}\n"
    },
    "contracts/oracle/ComplianceAggregator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IComplianceRegistryStub.sol\";\n\nerror ComplianceAggregator__OnlyWhitelistAction();\nerror ComplianceAggregator__ExcludeBlacklistAction();\n\nabstract contract ComplianceAggregator {\n    modifier onlyWhitelistAction() {\n        if (!stub.isWhitelist(msg.sender))\n            revert ComplianceAggregator__OnlyWhitelistAction();\n        _;\n    }\n\n    modifier ExcludeBlacklistAction() {\n        if (stub.isBlacklist(msg.sender))\n            revert ComplianceAggregator__ExcludeBlacklistAction();\n        _;\n    }\n\n    IComplianceRegistryStub public stub;\n\n    constructor(address complianceRegistryStub) {\n        stub = IComplianceRegistryStub(complianceRegistryStub);\n    }\n}\n"
    },
    "contracts/oracle/ComplianceRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {IComplianceRegistry} from \"../interfaces/IComplianceRegistry.sol\";\nimport {INetworkSupportedRegistry} from \"../interfaces/INetworkSupportedRegistry.sol\";\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\ncontract ComplianceRegistry is IComplianceRegistry, AccessControl {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant COMPLIANCE_REGISTRY_STUB_ROLE =\n        keccak256(\"COMPLIANCE_REGISTRY_STUB_ROLE\");\n\n    bool public override isWhitelistRegistry;\n    mapping(bytes32 => Compliance) public complianceList;\n    INetworkSupportedRegistry public networkRegistry;\n\n    constructor(bool _isWhitelistRegistry, address _networkRegistry) {\n        _setupRole(ADMIN_ROLE, _msgSender());\n        _setRoleAdmin(COMPLIANCE_REGISTRY_STUB_ROLE, ADMIN_ROLE);\n\n        isWhitelistRegistry = _isWhitelistRegistry;\n        networkRegistry = INetworkSupportedRegistry(_networkRegistry);\n    }\n\n    function addProposalToList(\n        ProposalCommon.Proposal memory proposal\n    ) external override onlyRole(COMPLIANCE_REGISTRY_STUB_ROLE) {\n        for (uint256 idx = 0; idx < proposal.targets.length; idx++) {\n            bytes memory data = proposal.targets[idx];\n            (address target, bytes32 networkHash) = decodeBytes(data);\n            bytes32 addressKey = getAddressKey(target);\n            if (complianceList[addressKey].isInList) continue;\n            if (target == address(0)) {\n                emit AddProposalToAnotherNetworkList(\n                    isWhitelistRegistry,\n                    data,\n                    networkHash\n                );\n            }\n            complianceList[addressKey] = Compliance({\n                proposalId: proposal.id,\n                isInList: true,\n                target: target,\n                author: proposal.author,\n                description: proposal.description\n            });\n        }\n    }\n\n    function getAddressKey(address target) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(target, \"ZKT\"));\n    }\n\n    function checkAddress(\n        address account\n    ) external view override returns (bool) {\n        return complianceList[getAddressKey(account)].isInList;\n    }\n\n    function decodeBytes(\n        bytes memory data\n    ) public view override returns (address, bytes32) {\n        (bytes memory addressBytes, bytes32 networkHash) = abi.decode(\n            data,\n            (bytes, bytes32)\n        );\n        if (networkRegistry.isNetworkSupported(networkHash)) {\n            address targetAddress = abi.decode(addressBytes, (address));\n            return (targetAddress, networkHash);\n        } else {\n            return (address(0), networkHash);\n        }\n    }\n}\n"
    },
    "contracts/oracle/ComplianceRegistryStub_L1.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {IComplianceRegistryStub} from \"../interfaces/IComplianceRegistryStub.sol\";\nimport {IComplianceRegistry} from \"../interfaces/IComplianceRegistry.sol\";\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\nerror ComplianceRegistryStub_L1__InvalidConfirmProposalStatus();\n\ncontract ComplianceRegistryStub_L1 is IComplianceRegistryStub, AccessControl {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant GUARDIAN_NODE = keccak256(\"GUARDIAN_NODE\");\n\n    constructor(address _whitelistRegistry, address _blacklistRegistry) {\n        _setupRole(ADMIN_ROLE, _msgSender());\n        _setRoleAdmin(GUARDIAN_NODE, ADMIN_ROLE);\n\n        whitelistRegistry = IComplianceRegistry(_whitelistRegistry);\n        blacklistRegistry = IComplianceRegistry(_blacklistRegistry);\n    }\n\n    IComplianceRegistry public whitelistRegistry;\n    IComplianceRegistry public blacklistRegistry;\n\n    function confirmProposal(\n        ProposalCommon.Proposal memory proposal\n    ) external override onlyRole(GUARDIAN_NODE) {\n        if (proposal.status != ProposalCommon.ProposalStatus.Approved)\n            revert ComplianceRegistryStub_L1__InvalidConfirmProposalStatus();\n        if (proposal.isWhitelist) {\n            whitelistRegistry.addProposalToList(proposal);\n            emit AddToWhitelist(proposal.id);\n        } else {\n            blacklistRegistry.addProposalToList(proposal);\n            emit AddToBlacklist(proposal.id);\n        }\n    }\n\n    function isWhitelist(\n        address account\n    ) external view override returns (bool) {\n        return\n            whitelistRegistry.checkAddress(account) &&\n            !blacklistRegistry.checkAddress(account);\n    }\n\n    function isBlacklist(\n        address account\n    ) external view override returns (bool) {\n        return blacklistRegistry.checkAddress(account);\n    }\n}\n"
    },
    "contracts/oracle/ComplianceRegistryStub.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {IComplianceRegistryStub} from \"../interfaces/IComplianceRegistryStub.sol\";\nimport {IComplianceRegistry} from \"../interfaces/IComplianceRegistry.sol\";\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\nerror ComplianceRegistryStub__InvalidConfirmProposalStatus();\n\ncontract ComplianceRegistryStub is IComplianceRegistryStub, AccessControl {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant PROPOSAL_MANAGEMENT_ROLE =\n        keccak256(\"PROPOSAL_MANAGEMENT_ROLE\");\n\n    IComplianceRegistry public whitelistRegistry;\n    IComplianceRegistry public blacklistRegistry;\n\n    constructor(address _whitelistRegistry, address _blacklistRegistry) {\n        _setupRole(ADMIN_ROLE, _msgSender());\n        _setRoleAdmin(PROPOSAL_MANAGEMENT_ROLE, ADMIN_ROLE);\n\n        whitelistRegistry = IComplianceRegistry(_whitelistRegistry);\n        blacklistRegistry = IComplianceRegistry(_blacklistRegistry);\n    }\n\n    function confirmProposal(\n        ProposalCommon.Proposal memory proposal\n    ) external override onlyRole(PROPOSAL_MANAGEMENT_ROLE) {\n        if (proposal.status != ProposalCommon.ProposalStatus.Approved)\n            revert ComplianceRegistryStub__InvalidConfirmProposalStatus();\n        if (proposal.isWhitelist) {\n            whitelistRegistry.addProposalToList(proposal);\n            emit AddToWhitelist(proposal.id);\n        } else {\n            blacklistRegistry.addProposalToList(proposal);\n            emit AddToBlacklist(proposal.id);\n        }\n    }\n\n    function isWhitelist(\n        address account\n    ) external view override returns (bool) {\n        return\n            whitelistRegistry.checkAddress(account) &&\n            !blacklistRegistry.checkAddress(account);\n    }\n\n    function isBlacklist(\n        address account\n    ) external view override returns (bool) {\n        return blacklistRegistry.checkAddress(account);\n    }\n}\n"
    },
    "contracts/oracle/NetworkSupportedRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {INetworkSupportedRegistry} from \"../interfaces/INetworkSupportedRegistry.sol\";\n\nerror NetworkSupportedRegistry__NetworkAlreadyExisted();\nerror NetworkSupportedRegistry__NetworkNotExisted();\n\ncontract NetworkSupportedRegistry is INetworkSupportedRegistry, Ownable {\n    mapping(bytes32 => bool) private supportedNetworks;\n\n    function isNetworkSupported(\n        bytes32 networkHash\n    ) external view returns (bool) {\n        return supportedNetworks[networkHash];\n    }\n\n    function isNetworkSupported(\n        string memory networkName\n    ) external view returns (bool) {\n        return supportedNetworks[keccak256(abi.encode(networkName))];\n    }\n\n    function batchAddNetworks(string[] memory networkNames) external {\n        for (uint256 idx = 0; idx < networkNames.length; idx++) {\n            addNetwork(networkNames[idx]);\n        }\n    }\n\n    function batchAddNetworks(bytes32[] memory networkHashes) external {\n        for (uint256 idx = 0; idx < networkHashes.length; idx++) {\n            addNetwork(networkHashes[idx]);\n        }\n    }\n\n    function batchRevokeNetworks(string[] memory networkNames) external {\n        for (uint256 idx = 0; idx < networkNames.length; idx++) {\n            revokeNetwork(networkNames[idx]);\n        }\n    }\n\n    function batchRevokeNetworks(bytes32[] memory networkHashes) external {\n        for (uint256 idx = 0; idx < networkHashes.length; idx++) {\n            revokeNetwork(networkHashes[idx]);\n        }\n    }\n\n    function addNetwork(string memory networkName) public onlyOwner {\n        bytes32 networkHash = keccak256(abi.encode(networkName));\n        if (supportedNetworks[networkHash])\n            revert NetworkSupportedRegistry__NetworkAlreadyExisted();\n        supportedNetworks[networkHash] = true;\n        emit AddNetworkName(networkName, networkHash);\n    }\n\n    function addNetwork(bytes32 networkHash) public onlyOwner {\n        if (supportedNetworks[networkHash])\n            revert NetworkSupportedRegistry__NetworkAlreadyExisted();\n        supportedNetworks[networkHash] = true;\n        emit AddNetworkHash(networkHash);\n    }\n\n    function revokeNetwork(string memory networkName) public onlyOwner {\n        bytes32 networkHash = keccak256(abi.encode(networkName));\n        if (!supportedNetworks[networkHash])\n            revert NetworkSupportedRegistry__NetworkNotExisted();\n        supportedNetworks[networkHash] = false;\n        emit RevokeNetworkName(networkName, networkHash);\n    }\n\n    function revokeNetwork(bytes32 networkHash) public onlyOwner {\n        if (!supportedNetworks[networkHash])\n            revert NetworkSupportedRegistry__NetworkNotExisted();\n        supportedNetworks[networkHash] = false;\n        emit RevokeNetworkHash(networkHash);\n    }\n}\n"
    },
    "contracts/oracle/ProposalManagement.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {IProposalManagement} from \"../interfaces/IProposalManagement.sol\";\nimport {IComplianceRegistryStub} from \"../interfaces/IComplianceRegistryStub.sol\";\nimport {IGuardianNode} from \"../interfaces/IGuardianNode.sol\";\nimport {ProposalCommon} from \"../libraries/ProposalCommon.sol\";\n\nerror ProposalManagement__AlreadyExistProposal(bytes32 proposalId);\nerror ProposalManagement__InvalidSignature();\nerror ProposalManagement__OnlyVoteForPendingProposal();\n\ncontract ProposalManagement is IProposalManagement, AccessControl {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant SPEAKER_ROLE = keccak256(\"SPEAKER_ROLE\");\n    bytes32 public constant VOTER_ROLE = keccak256(\"VOTER_ROLE\");\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\"GUARDIAN_ROLE\");\n\n    uint256 public constant EXPIRY_DAYS = 7 days;\n\n    constructor(address guardianNode, address complianceRegistryStub) {\n        _setupRole(ADMIN_ROLE, _msgSender());\n        _setRoleAdmin(SPEAKER_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(VOTER_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(GUARDIAN_ROLE, ADMIN_ROLE);\n\n        sentry = IGuardianNode(guardianNode);\n        stub = IComplianceRegistryStub(complianceRegistryStub);\n    }\n\n    bytes32[] public proposalIdList;\n    mapping(bytes32 => ProposalCommon.Proposal) public proposals;\n    IGuardianNode public sentry;\n    IComplianceRegistryStub public stub;\n\n    function createProposal(\n        bytes32 proposalId,\n        bytes[] calldata targets,\n        bool isWhitelist,\n        string calldata description,\n        bytes calldata signature\n    ) external override onlyRole(SPEAKER_ROLE) {\n        if (\n            proposals[proposalId].status !=\n            ProposalCommon.ProposalStatus.Unknown\n        ) {\n            revert ProposalManagement__AlreadyExistProposal(proposalId);\n        }\n        bytes memory targetBytes;\n        for (uint i = 0; i < targets.length; i++) {\n            targetBytes = abi.encodePacked(targetBytes, targets[i]);\n        }\n        bytes32 hash = keccak256(\n            abi.encodePacked(proposalId, targetBytes, isWhitelist)\n        );\n        if (ECDSA.recover(hash, signature) != _msgSender())\n            revert ProposalManagement__InvalidSignature();\n\n        // add proposalId into global list\n        proposalIdList.push(proposalId);\n        proposals[proposalId] = ProposalCommon.Proposal({\n            id: proposalId,\n            author: _msgSender(),\n            targets: targets,\n            isWhitelist: isWhitelist,\n            description: description,\n            timestamp: block.timestamp,\n            status: ProposalCommon.ProposalStatus.Pending,\n            signature: signature,\n            voters: 0,\n            activeNodes: sentry.activeNodes()\n        });\n    }\n\n    function voteAndConfirmProposals(\n        bytes32[] calldata proposalIds\n    ) external override onlyRole(VOTER_ROLE) {\n        for (uint256 idx = 0; idx < proposalIds.length; idx++) {\n            bytes32 proposalId = proposalIds[idx];\n            if (\n                proposals[proposalId].status !=\n                ProposalCommon.ProposalStatus.Pending\n            ) revert ProposalManagement__OnlyVoteForPendingProposal();\n            proposals[proposalId].voters += 1;\n            if (\n                proposals[proposalId].voters * 2 >\n                proposals[proposalId].activeNodes\n            ) {\n                proposals[proposalId].status = ProposalCommon\n                    .ProposalStatus\n                    .Approved;\n            }\n            if (\n                proposals[proposalId].status ==\n                ProposalCommon.ProposalStatus.Approved\n            ) {\n                stub.confirmProposal(proposals[proposalId]);\n                emit ConfirmProposal(proposalId);\n            }\n        }\n    }\n\n    function rejectExpiredProposals(\n        bytes32[] calldata expiredProposalIds\n    ) external override onlyRole(GUARDIAN_ROLE) {\n        for (uint256 idx = 0; idx < expiredProposalIds.length; idx++) {\n            bytes32 proposalId = expiredProposalIds[idx];\n            if (\n                proposals[proposalId].status !=\n                ProposalCommon.ProposalStatus.Pending\n            ) continue;\n            // double check expired timestamp\n            if (\n                proposals[proposalId].timestamp + EXPIRY_DAYS >= block.timestamp\n            ) {\n                proposals[proposalId].status = ProposalCommon\n                    .ProposalStatus\n                    .Rejected;\n                emit RejectProposal(proposalId);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": false
      }
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}